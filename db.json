{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/even/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/even/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.eot","path":"fonts/chancery/apple-chancery-webfont.eot","modified":1,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff","path":"fonts/chancery/apple-chancery-webfont.woff","modified":1,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.ttf","path":"fonts/chancery/apple-chancery-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff2","path":"fonts/chancery/apple-chancery-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/even/source/js/src/even.js","path":"js/src/even.js","modified":1,"renderable":1},{"_id":"themes/even/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/even/source/js/src/search.js","path":"js/src/search.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/blank.gif","path":"lib/fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_loading@2x.gif","path":"lib/fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_overlay.png","path":"lib/fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_loading.gif","path":"lib/fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite.png","path":"lib/fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite@2x.png","path":"lib/fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.css","path":"lib/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.pack.js","path":"lib/fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.js","path":"lib/fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/slideout/slideout.min.js","path":"lib/slideout/slideout.min.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/slideout/slideout.js","path":"lib/slideout/slideout.js","modified":1,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.svg","path":"fonts/chancery/apple-chancery-webfont.svg","modified":1,"renderable":1},{"_id":"themes/even/source/image/reward/alipay.png","path":"image/reward/alipay.png","modified":1,"renderable":1},{"_id":"themes/even/source/lib/jquery/jquery-3.1.1.min.js","path":"lib/jquery/jquery-3.1.1.min.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/fancybox_buttons.png","path":"lib/fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/even/source/image/reward/wechat.png","path":"image/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-media.js","path":"lib/fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1}],"Cache":[{"_id":"themes/even/.eslintrc","hash":"af17814aa6d4f488f9c09a727652a7efc1552c03","modified":1489927014000},{"_id":"themes/even/.gitignore","hash":"1d54f4b6fe44e61eae3d29e95de4b2618a6619aa","modified":1489927014000},{"_id":"themes/even/README.md","hash":"e7adff2a1ec8b72feaee61fbc5467693570c1de3","modified":1489927014000},{"_id":"themes/even/LICENSE","hash":"6fd796a4c624297885ceed920ac7130a96f29a85","modified":1489927014000},{"_id":"themes/even/_config.yml","hash":"a2b1894f0fbfbd6d18cdb40a68238481bfa23660","modified":1489928540000},{"_id":"themes/even/package.json","hash":"425f33c9ddf7636a1c4b6d21ea1ff48b8d14cd78","modified":1489927014000},{"_id":"source/_posts/AngularJs笔记.md","hash":"7698227b367d9fcc46961cb6c3858b60b0c299bd","modified":1489925240000},{"_id":"source/_posts/Hexo构建Github博客.md","hash":"af0715ba933d718872922a6cdc54f1279e6d4ed2","modified":1489925240000},{"_id":"source/_posts/SpringMVC-controller输入、输出处理.md","hash":"19391f0323e3439c8950973bc1fbe330300b71e2","modified":1489928347000},{"_id":"source/_posts/maven-release-插件使用.md","hash":"b1a09c2fc6643168036249e4705aff6e0ca2c586","modified":1489928280000},{"_id":"source/_posts/mybatis-generato插件使用.md","hash":"3d58a35ab37802aedb18d92dd3d433a23e00050e","modified":1489928209000},{"_id":"source/_posts/vue学习系列-vue结合Semantic-UI.md","hash":"36c0ae94c2c0322bee6c1af39b3e9c7f9797cbd8","modified":1489926730000},{"_id":"source/about/index.md","hash":"62a4415bebe80ce5c0bf846830e1e0188469a3f8","modified":1489925240000},{"_id":"source/_posts/vue学习系列-初识vue.md","hash":"1d43e2e324b3f82ab3b63f47e06795d79ba56b2a","modified":1489928085000},{"_id":"source/categories/index.md","hash":"667edc297548287c14ebdf46da4f0d0282cb5801","modified":1489925240000},{"_id":"source/resume/index.md","hash":"4c1d7fce8fb4ece04fbbf44a6fb0b0278ca1471d","modified":1490182171000},{"_id":"source/tags/index.md","hash":"9da8760b3936f937256cef84a687bd9c23722bbb","modified":1489925240000},{"_id":"themes/even/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1489927014000},{"_id":"themes/even/.git/config","hash":"5ef1223485809abf438784735be8518631c5a612","modified":1489927014000},{"_id":"themes/even/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1489926876000},{"_id":"themes/even/.git/index","hash":"e2f9bb7d1402e75e5b7c15b997302afee4db7591","modified":1489927027000},{"_id":"themes/even/.git/packed-refs","hash":"be4e4e157753218657eb4d57b666fe423852d236","modified":1489927014000},{"_id":"themes/even/languages/default.yml","hash":"eeaa1cf150c669c08f4b70336c819b8a8eac1d0b","modified":1489927014000},{"_id":"themes/even/languages/en.yml","hash":"e5eebf05f48a53020ee798cac58b0c3e7f0a95f2","modified":1489927014000},{"_id":"themes/even/layout/_layout.swig","hash":"011a510b0977c40bda922d5969d39071f0e8ae99","modified":1489927014000},{"_id":"themes/even/layout/archive.swig","hash":"30971263c38e67bffb6fdd90d458f6c82a75c05d","modified":1489927014000},{"_id":"themes/even/layout/categories.swig","hash":"dc244e0ee1fc34f43d5b195b9c1f6ef6d3ad2d0d","modified":1489927014000},{"_id":"themes/even/layout/page.swig","hash":"3a767206198efb3eb487d7061107212c2171106c","modified":1489927014000},{"_id":"themes/even/layout/index.swig","hash":"f3341b5f4af1eab0930a1d078b3022bbe0a59232","modified":1489927014000},{"_id":"themes/even/layout/tags.swig","hash":"ae9500008d0b445d1962a34cdb59fde3106ed33a","modified":1489927014000},{"_id":"themes/even/layout/post.swig","hash":"a0ed82a3aa04d3554dd654a3cf6194644ae1574c","modified":1489927014000},{"_id":"themes/even/languages/zh-cn.yml","hash":"9fca22d97f9381afc187e9b14d9f8de5c0f5d9c5","modified":1489927014000},{"_id":"themes/even/source/favicon.ico","hash":"0505cec3b99707df7a681de37177b3cf7950cc5d","modified":1489927014000},{"_id":"themes/even/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1489926876000},{"_id":"themes/even/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1489926876000},{"_id":"themes/even/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1489926876000},{"_id":"themes/even/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1489926876000},{"_id":"themes/even/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1489926876000},{"_id":"themes/even/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1489926876000},{"_id":"themes/even/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1489926876000},{"_id":"themes/even/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1489926876000},{"_id":"themes/even/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1489926876000},{"_id":"themes/even/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1489926876000},{"_id":"themes/even/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1489926876000},{"_id":"themes/even/.git/logs/HEAD","hash":"16031386b336723eae78a0771858bfdd2dbde1c8","modified":1489927014000},{"_id":"themes/even/layout/_macro/post.swig","hash":"d53a9b2920f744209984add5131fc965850c027e","modified":1489927014000},{"_id":"themes/even/layout/_macro/archive.swig","hash":"09cde870c8392d93d4bde0862f2f53a87b196ad4","modified":1489927014000},{"_id":"themes/even/layout/_partial/footer.swig","hash":"248a60fe0122daf3706a291e4313f629de29384f","modified":1489927014000},{"_id":"themes/even/layout/_partial/comments.swig","hash":"4bdae8e9d7031b927b3af9596d05f7a4fb4a866a","modified":1489927014000},{"_id":"themes/even/layout/_partial/head.swig","hash":"5497cb03439d90b4ba7148bbc1e9d303539bb388","modified":1489927014000},{"_id":"themes/even/layout/_partial/header.swig","hash":"01972309c0804558c5b5476fa219ce000330f244","modified":1489927014000},{"_id":"themes/even/layout/_partial/pagination.swig","hash":"3843e523b9a7a1c5973d0c2de05cc88467733e09","modified":1489927014000},{"_id":"themes/even/layout/_partial/slideout.swig","hash":"d046aa352c8e3f298c21ce537bd3dffc63e33abc","modified":1489927014000},{"_id":"themes/even/layout/_script/comments.swig","hash":"86b601ccb00d7283507e40deb328a3d28da60292","modified":1489927014000},{"_id":"themes/even/layout/_script/analytics.swig","hash":"24ba4a8adcaf09c9ede76405ee732385595d8e39","modified":1489927014000},{"_id":"themes/even/layout/_script/config.swig","hash":"7f2a1da26b780079214457d85136ffffaf36092f","modified":1489927014000},{"_id":"themes/even/layout/_script/libs.swig","hash":"67940ae28766608a3d6f287ecc95fa05db49f243","modified":1489927014000},{"_id":"themes/even/layout/_script/search.swig","hash":"02c3361c9b8645e00be01f51b49b562d9e51858f","modified":1489927014000},{"_id":"themes/even/layout/_script/theme.swig","hash":"cb81a0a6a6d5264cc6451dda3dd3a96101f89b1d","modified":1489927014000},{"_id":"themes/even/source/css/_base.scss","hash":"d03265b755abb63f8189750b20321c6aef7b7d7d","modified":1489927014000},{"_id":"themes/even/source/css/_variables.scss","hash":"0d7c87defe2bfc316172564b2caef42d8f966675","modified":1489927014000},{"_id":"themes/even/source/css/style.scss","hash":"6c57b95c4f936c7cc2a7047150b163919038168e","modified":1489927014000},{"_id":"themes/even/.git/refs/heads/master","hash":"ee09e953ff31da5697f26ce93fe5893f638c87f2","modified":1489927014000},{"_id":"themes/even/layout/_partial/_footer/social.swig","hash":"65368d0a5108fecc072eaea3b1fb04c597941729","modified":1489927014000},{"_id":"themes/even/layout/_partial/_head/meta.swig","hash":"4692e4aa4675e069f886b7ee49bd610c00f3e3bd","modified":1489927014000},{"_id":"themes/even/layout/_partial/_post/copyright.swig","hash":"dbd57ececb200ee220189f51cc748023b96592d8","modified":1489927014000},{"_id":"themes/even/layout/_partial/_post/reward.swig","hash":"faf64b5461970fda72863e9779f3f024cb493658","modified":1489927014000},{"_id":"themes/even/layout/_partial/_post/toc.swig","hash":"fc21e5b9ebaca219678d85b8c5e4b3ee013fca25","modified":1489927014000},{"_id":"themes/even/layout/_script/_analytics/google-analytics.swig","hash":"f44684799386fbd4af6e5994b0c14c85eeff060c","modified":1489927014000},{"_id":"themes/even/layout/_script/_comments/disqus.swig","hash":"0502145777d65515249680d3e4611f249e3d9ff8","modified":1489927014000},{"_id":"themes/even/layout/_script/_analytics/baidu-analytics.swig","hash":"5d62309b16071f1b6952891ec8e1f1d42e38a088","modified":1489927014000},{"_id":"themes/even/layout/_script/_comments/duoshou.swig","hash":"582cf94bc12b56c6a16b5f3aa0067b51f74b0d40","modified":1489927014000},{"_id":"themes/even/source/css/_common/_animation.scss","hash":"f32d2444f0ab4dcb8b811ae1bccae6073f21a988","modified":1489927014000},{"_id":"themes/even/source/css/_common/_normalize.scss","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1489927014000},{"_id":"themes/even/source/css/_common/_utils.scss","hash":"21dfd8cfdb574504b97896a282044d93d972e338","modified":1489927014000},{"_id":"themes/even/source/css/_custom/_custom.scss","hash":"d0873cd8554d515282a6792fcc3f5bd4a256b7a6","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_back-to-top.scss","hash":"c6f586ac04a9a0f3633dadf5c66be9e0c4027f1d","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_archive.scss","hash":"019ee950e5da4395c867b950c8da06d03310b3db","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_categories.scss","hash":"96f47000d25ef4e0e948f8f43fa4e2983ff0d746","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_footer.scss","hash":"76f3a72440be8aa1e93d8ddc5ea958777d1545ab","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_header.scss","hash":"4a3e92feef33bed0021f1a65a801c24ee7d5946f","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_iconfont.scss","hash":"2a68735df51cf6b1c9559e70814ac311804cd8eb","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_mobile.scss","hash":"0d1c60bd92f8e5db01e7843934251152ec4d6d44","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_pagination.scss","hash":"b24db39534e180ebcebba2e81d91d9f1d534eea1","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_post.scss","hash":"7d03216b1fb5007ecc33412cacab74432c4e02d2","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_slideout.scss","hash":"e4820a42698f647a824575b234835b9ce4ac4797","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_tags.scss","hash":"fb4bf54b34291d5b72598a7ba4d3e370c8ad9383","modified":1489927014000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.eot","hash":"fef78bd502f74fdbf0316123e176454cb3eb4e50","modified":1489927014000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff","hash":"95beafe485d4bdbddfecbcf3b2bc9b2d9cf5f5c5","modified":1489927014000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.ttf","hash":"5e25c531901d8a9e37ab45a7f4acdbe5324b51b6","modified":1489927014000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff2","hash":"afd0f74128f1c21c5a542b2e100870e74da663b6","modified":1489927014000},{"_id":"themes/even/source/js/src/even.js","hash":"9491d0c34812d76d5caf303100b17510ff8f0fc3","modified":1489927014000},{"_id":"themes/even/source/js/src/bootstrap.js","hash":"c37073db93271410e30dfa9a894fc78a4f025abd","modified":1489927014000},{"_id":"themes/even/source/js/src/search.js","hash":"9ab2f14dc2cd2e97f2e596ad85175c8777fa966d","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1489927014000},{"_id":"themes/even/source/lib/slideout/slideout.min.js","hash":"7166ed307b771398a593fc3d4f1c5d93fbbe19bb","modified":1489927014000},{"_id":"themes/even/source/lib/slideout/slideout.js","hash":"81ec76a63f6f4bbdfc801d822182ab8afa9068fe","modified":1489927014000},{"_id":"themes/even/.git/objects/pack/pack-27f2e9a2e366ee9d4b2e1199e35049ecce84b7a0.idx","hash":"adadb01b9a6ea1b09a876d5feffd1d6412819a46","modified":1489927014000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.svg","hash":"a94e508f306a742637653f98c6e8827b11d3c142","modified":1489927014000},{"_id":"themes/even/source/image/reward/alipay.png","hash":"75e0f7d3f804f5ed5f6978ffdc6522224df1b701","modified":1489927014000},{"_id":"themes/even/source/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1489927014000},{"_id":"themes/even/.git/logs/refs/heads/master","hash":"16031386b336723eae78a0771858bfdd2dbde1c8","modified":1489927014000},{"_id":"themes/even/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_footer/_copyright.scss","hash":"afbc0f90c674e5cd5fd7509eb1296d60b999d4e1","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_header/_logo.scss","hash":"109073dde15146d835bf06faa2f256d1ac658315","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_footer/_social.scss","hash":"bca6a1036951c2475278bfbd3a5ce51ff861e9a3","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_header/_menu.scss","hash":"c823489bc6c0f320618362f9e07d9114b9f8612b","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_header/_search.scss","hash":"b272e3f0fba05d66de648717f6dfe2718637e8f6","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_post/_content.scss","hash":"a00cd224d832aff0c4a6deefc0b2b91fe4548172","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_post/_code.scss","hash":"d866ae4f05dd3f65e55388727c1277ace55d4c7c","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_post/_copyright.scss","hash":"9e33c5935885552d6abdf43e2b1e5a278211f052","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_post/_footer.scss","hash":"9f2ab0ac20b2a8bfd315febd387c399f72f43d10","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_post/_header.scss","hash":"794b85495d917e24bbe2f2782f3c7e69b6845eee","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_post/_reward.scss","hash":"66ec9faa27ed879dc9a2ca59c73ed6bfd5e61dcd","modified":1489927014000},{"_id":"themes/even/source/css/_partial/_post/_toc.scss","hash":"dba41bc7638e22c59eb704fc6de80c32d6f1ed52","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1489927014000},{"_id":"themes/even/source/image/reward/wechat.png","hash":"f9904f25b35fa9d38e221ef7089787d24ee8b02b","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1489927014000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489927014000},{"_id":"themes/even/.git/logs/refs/remotes/origin/HEAD","hash":"16031386b336723eae78a0771858bfdd2dbde1c8","modified":1489927014000},{"_id":"themes/even/.git/objects/pack/pack-27f2e9a2e366ee9d4b2e1199e35049ecce84b7a0.pack","hash":"0eccbab5cd397f8f14a94f2ebb750b39c15f4873","modified":1489927014000},{"_id":"public/atom.xml","hash":"c6cd86a27a2fe5340634cc6f5ba5cba21c846687","modified":1490182193885},{"_id":"public/sitemap.xml","hash":"bd3f085940d6a053609894e51b8c0dca396d900b","modified":1490182193890},{"_id":"public/about/index.html","hash":"0119b6f67ada66059df06e24596d165126a01c58","modified":1490182193898},{"_id":"public/categories/index.html","hash":"177c3de4840fb1083c92d09e8b12ce0c3ef7633a","modified":1490182193898},{"_id":"public/tags/index.html","hash":"eac8069d313e3c8b7a36133fda6824142c22225e","modified":1490182193898},{"_id":"public/2017/03/19/maven-release-插件使用/index.html","hash":"a092d68b13ec138e3232a3bc760e218c77e176e5","modified":1490182193898},{"_id":"public/2017/03/19/vue学习系列-初识vue/index.html","hash":"a93a5ec002d6183c810743d9bd848b304c65ec51","modified":1490182193899},{"_id":"public/2017/03/19/vue学习系列-vue结合Semantic-UI/index.html","hash":"8fa26d21220228793dab365d5bdf9341b452659b","modified":1490182193899},{"_id":"public/2016/03/04/Hexo构建Github博客/index.html","hash":"e8ce7a8426ee09b0d40ce5ee6bb04086cab68523","modified":1490182193899},{"_id":"public/archives/index.html","hash":"00d64ddd0e4c425e704aafce48bb10b8c5766f4c","modified":1490182193899},{"_id":"public/categories/web前端/index.html","hash":"1366da910e5e654721756dcfad150e9bc8d66a64","modified":1490182193899},{"_id":"public/categories/nodejs/index.html","hash":"e182ca5ede8c093d2f143a239a7cf4c94b777fd0","modified":1490182193899},{"_id":"public/categories/java/index.html","hash":"62d4f794762858cd5a51f637f10112de2b73b539","modified":1490182193899},{"_id":"public/categories/前端/index.html","hash":"219658298159f019c56ce38440ad89292b6bd0b5","modified":1490182193899},{"_id":"public/index.html","hash":"85f97457a293b066ba5fc41419e09097c5143dc5","modified":1490182193899},{"_id":"public/tags/directive/index.html","hash":"5dc0db819f51fc7e7f3c007d9fd12b9cf32e11ca","modified":1490182193899},{"_id":"public/tags/angularjs/index.html","hash":"103e7f23889d89a2b9b89ea146a145f43e19cd0c","modified":1490182193899},{"_id":"public/tags/javascript/index.html","hash":"4ed8d7f21a6415465d95493131eb3b8e078c95ec","modified":1490182193899},{"_id":"public/tags/hexo/index.html","hash":"904a092c3a0f4d0689a2b07df6ad93b072b0109b","modified":1490182193899},{"_id":"public/tags/nodejs/index.html","hash":"87ddc1ccceac895473bc5080875bc8b108ff19e7","modified":1490182193899},{"_id":"public/tags/博客/index.html","hash":"fba726464d1accdd055caafb76a704904ad56601","modified":1490182193899},{"_id":"public/tags/java/index.html","hash":"45ac02abf1887d82c2c1a05b01c2b1ebe8846a8e","modified":1490182193899},{"_id":"public/tags/springMVC/index.html","hash":"f2bfdc92b9e7870b7bf228d847c204a0df473c04","modified":1490182193900},{"_id":"public/tags/controller/index.html","hash":"c662b63441795399ccce4f135aa6b65779774807","modified":1490182193901},{"_id":"public/tags/maven/index.html","hash":"85ad09c690d10dc5129f5fd0d3e5f57766d60556","modified":1490182193901},{"_id":"public/tags/mybatis-generator/index.html","hash":"3f2c034635c9bc045044691f0d39f689058b54e3","modified":1490182193901},{"_id":"public/tags/mbg/index.html","hash":"3970f5b762a4366ef2a46b6f7d1eb66d9321427f","modified":1490182193901},{"_id":"public/tags/vue/index.html","hash":"f98f3b699b3a3ebd03afcebe0af2941055a0637c","modified":1490182193901},{"_id":"public/tags/Semantic-UI/index.html","hash":"8d029e52994438eccd20e56587ebcea477d5b39a","modified":1490182193901},{"_id":"public/resume/index.html","hash":"a2ab79ba78d2ed88da3282bd15e17fc46940fa0b","modified":1490182193901},{"_id":"public/2017/03/19/SpringMVC-controller输入、输出处理/index.html","hash":"9a68533296d0de9b01153e4edaad3bc39c15a6b3","modified":1490182193901},{"_id":"public/2017/03/19/mybatis-generato插件使用/index.html","hash":"1a2f4f158cfcce3fc480435f93bf42b45e28a465","modified":1490182193901},{"_id":"public/2017/03/19/AngularJs笔记/index.html","hash":"e5c5e022de8b7d66df960d36ac44cbfd63a2492b","modified":1490182193901},{"_id":"public/favicon.ico","hash":"0505cec3b99707df7a681de37177b3cf7950cc5d","modified":1490182193909},{"_id":"public/fonts/chancery/apple-chancery-webfont.eot","hash":"fef78bd502f74fdbf0316123e176454cb3eb4e50","modified":1490182193909},{"_id":"public/fonts/chancery/apple-chancery-webfont.woff","hash":"95beafe485d4bdbddfecbcf3b2bc9b2d9cf5f5c5","modified":1490182193909},{"_id":"public/fonts/chancery/apple-chancery-webfont.ttf","hash":"5e25c531901d8a9e37ab45a7f4acdbe5324b51b6","modified":1490182193909},{"_id":"public/fonts/chancery/apple-chancery-webfont.woff2","hash":"afd0f74128f1c21c5a542b2e100870e74da663b6","modified":1490182193909},{"_id":"public/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490182193909},{"_id":"public/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490182193909},{"_id":"public/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490182193910},{"_id":"public/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490182193910},{"_id":"public/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490182193910},{"_id":"public/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490182193910},{"_id":"public/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490182193910},{"_id":"public/fonts/chancery/apple-chancery-webfont.svg","hash":"a94e508f306a742637653f98c6e8827b11d3c142","modified":1490182193917},{"_id":"public/image/reward/alipay.png","hash":"75e0f7d3f804f5ed5f6978ffdc6522224df1b701","modified":1490182193919},{"_id":"public/js/src/bootstrap.js","hash":"c37073db93271410e30dfa9a894fc78a4f025abd","modified":1490182193926},{"_id":"public/js/src/even.js","hash":"9491d0c34812d76d5caf303100b17510ff8f0fc3","modified":1490182193926},{"_id":"public/js/src/search.js","hash":"9ab2f14dc2cd2e97f2e596ad85175c8777fa966d","modified":1490182193926},{"_id":"public/lib/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1490182193926},{"_id":"public/lib/slideout/slideout.min.js","hash":"7166ed307b771398a593fc3d4f1c5d93fbbe19bb","modified":1490182193926},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1490182193926},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1490182193926},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1490182193926},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1490182193926},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1490182193926},{"_id":"public/lib/fancybox/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1490182193926},{"_id":"public/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1490182193926},{"_id":"public/lib/slideout/slideout.js","hash":"81ec76a63f6f4bbdfc801d822182ab8afa9068fe","modified":1490182193926},{"_id":"public/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1490182193926},{"_id":"public/image/reward/wechat.png","hash":"f9904f25b35fa9d38e221ef7089787d24ee8b02b","modified":1490182193926},{"_id":"public/css/style.css","hash":"0031885751ee2b7a3a8f82486108c7a5c131ae9a","modified":1490182193949}],"Category":[{"name":"web前端","_id":"cj0kw030i0004lc7yijjy455q"},{"name":"nodejs","_id":"cj0kw030t0009lc7yfo7mm5ue"},{"name":"java","_id":"cj0kw030w000elc7yt6pntkkp"},{"name":"前端","_id":"cj0kw0310000qlc7y35s96klp"}],"Data":[],"Page":[{"title":"about","date":"2016-08-17T06:37:15.000Z","layout":"about","_content":"\n就这样开始吧，总得留下一些东西。\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-08-17 14:37:15\nlayout: about\n---\n\n就这样开始吧，总得留下一些东西。\n","updated":"2017-03-19T12:07:20.000Z","path":"about/index.html","comments":1,"_id":"cj0kw030e0001lc7ya66yujn8","content":"<p>就这样开始吧，总得留下一些东西。</p>\n","excerpt":"","more":"<p>就这样开始吧，总得留下一些东西。</p>\n"},{"title":"categories","date":"2016-08-17T06:36:08.000Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-08-17 14:36:08\nlayout: categories\n---\n","updated":"2017-03-19T12:07:20.000Z","path":"categories/index.html","comments":1,"_id":"cj0kw030i0003lc7yomdyp985","content":"","excerpt":"","more":""},{"title":"简历","date":"2016-08-17T06:36:54.000Z","layout":"post","_content":"\n# 联系方式\n\n- 手机：15800822331\n- Email：kyyblabla@163.com\n- QQ/微信：337994130/kyyblabla\n\n---\n\n# 个人信息\n\n - 康岩岩/男/1992 \n - 本科/中原工学院/计算机科学与技术/2015届\n - 工作年限：1年\n - 技术博客：http://kyyblabla.github.io/\n - Github: https://github.com/kyyblabla\n - OSChina:http://git.oschina.net/kyyblabla\n - 期望职位：**Java Web工程师**\n - 期望薪资：面议\n - 期望城市：上海\n \n---\n\n# 工作/项目经历\n\n\n## 北京源石云科技有限公司 （2015年6月 ~ 至今）\n\n### 分期消费电商平台（小象优品 ）\n\n分期消费电商App，主打优选商品与分期消费。\n\n技术方案：SpringMVC+MyBatis+MySql+Memcache\n\n主要分工：\n\n- 商品、订单模块的设计与实现，面向APP\n- 商品、订单、用户后台管理模块的设计与实现\n- 独立负责管理后台的前端设计与实现，并协助调试后台管理接口\n\n由于之前习惯使用JAP，对Mybatis纯过程sql语句书写很不适应，但是最终做到了细粒度的查询优化，进一步提高了对sql的掌握程度与优化经验。提出并使用SpringRmi作为各子系统之间远程调用方案（原方案为纯Http调用）, 使远程接口的调用更高效、可靠。本人参考主流电商平台的商品模型，设计出适用于小型电商的SKU管理方案。后台管理使用AngularJS快速推进开发进度，前端严格遵循模块化开发规范提高了系统组件的复用性。\n\n\n### 基于阿里Tanx的DSP广告投放系统（ 源石DSP ）\n\n广告投放平台，对接Tanx（阿里妈妈旗下互联网推广的营销平台），主要投放目标为移动网页、app。 高并发系统，集群环境，日均PV300万。\n\n主要分工：\n\n- 广告展示、点击事件的回调追踪模块，根据规则（千次点击）进行计费\n- 设计与实现后台管理系统前端界面(AngularJS+Bootstrap+RequireJS)，并协助后台系统完成API测试与改进\n- 广告浏览用户地理位置查询接口（基于用户经纬度）\n\n根据产品原型独立实现后台管理系统前端界面，提供广告编辑、预览（模拟移动设备）与投放计划管理。\n使用MongoDB的地理位置Geohash检索，索引全国最小行政单位（村委、街道）数据70万+，数据来源为百度地图api，查询准确率达96%。由于Tanx平台要求单次请求响应时间为160ms，因此系统采用长连接技术，各个模块高度压榨运行效率。\n\n### 信贷员在线拍标工具（ 发单宝）\n\n面向信贷员的信贷信息拍卖平台，提供信贷信息实时在线竞拍。\n\n技术方案：SpringMVC+SpringJPA+MySql+Memcache\n\n- 向APP提供贷款订单、用户信息相关接口\n- 订单、用户相关的后台管理模块设计与实现\n- 后台管理系统前端设计与实现（Angular+BootStrap+RequireJs）\n\n系统的一个难点为订单状态的追踪与埋点触发，本人通过细致的流程分析与产品沟通，确定了订单的各个状态转换与触发事件，做到了状态不遗漏、事件不误触。另外高并发环境下的Spring事务控制也通过此项目得到了很好的掌握。\n\n### 其他项目\n- 合作电商分期消费服务\n- 信贷信息录入助手\n\n \n## 上海直达软件有限公司【实习】（2014年10月 ~ 2015年4月）\n\n### 期货交易通信接口\n\n主要工作：\n\n- 研读交易所开发文档（英文）、学习期货交易相关术语\n- 采用VS2012开发环境，使用C++对交易所提供的C语言接口进行封装，联通内部交易系统\n- 多线程通信程序，使用Boost库提供线程支持\n- 配合SGX进行接口测试，为公司获取交易所认证资格\n\n\n##  中原工学院【在校】（2012年10月~2014年10月）\n\n###  舆情分析-新浪微博采集系统\n\n舆情分析系统的子项目，采集最新微博内容，为核心分析引擎提供数据源。\n\n技术与分工：\n\n- 采用了Spring构建抓取框架,使用HttpClient模拟浏览器请求登陆并抓取微博信息\n- 抓取程序支持动态IP代理更换以及动态账户更换，以防止新浪屏蔽IP及账户\n- 使用Jsoup解析网页中微博信息，存入MySQL数据库，使用Spring JPA构建持久化接口\n- 单台机器微博日均获取量400万\n\n### 基于MQTT的消息服务器\n\n毕业设计题目，可提供嵌入式设备与管理终端之间的通信服务，为智能化工厂项目的子系统，使用MQTT通信协议。\n\n技术与功能：\n\n- 提供平台无关的通信接口，数据格式为JSON，桌面/移动客户端、浏览器（Web Socket）都可接入\n- 采用负载均衡技术、高效处理并发数据，对外提供多对多通信\n- 该项目最终获取校级优秀毕业设计荣誉\n\n\n---\n\n\n# 技能列表\n\n- Web开发：Java\n- Web框架：Spring JPA/Spring MVC/Hibernate/MyBatis\n- Web服务器：Nginx/Tomcat/Jetty\n- 前端框架：Bootstrap/AngularJS/HTML5\n- 前端工具：JQuery/Bower/RequireJs/Gulp/Underscore/LeSS\n- 数据库：MySQL/MongoDB\n- 缓存工具：Memcache/ECache\n- 版本管理、文档和自动化部署工具：Svn/Git/Maven/NPM\n- 单元测试：JUnit/Mocha(JavaScript)\n- 云和开放平台：阿里云/Bae/微信应用后台\n- 其他掌握语言、框架：C/C++/Qt C++/C#\n\n---\n\n# 自我评价\n\n- 重视团队合作，注重开发流程规范，热爱文档\n- 喜欢倒腾各种新奇、有趣的技术\n- 喜欢关注IT行业的最新动态、技术大牛的轶事\n\n---\n\n## 技能关键字\n\n- Java\n- Spring\n- Html\n- Bootstrap\n- AngularJs\n- Mysql\n\n---\n\n# 致谢\n\n感谢您花时间阅读我的简历，期待能有机会和您共事。\n","source":"resume/index.md","raw":"---\ntitle: 简历\ndate: 2016-08-17 14:36:54\nlayout: post\n---\n\n# 联系方式\n\n- 手机：15800822331\n- Email：kyyblabla@163.com\n- QQ/微信：337994130/kyyblabla\n\n---\n\n# 个人信息\n\n - 康岩岩/男/1992 \n - 本科/中原工学院/计算机科学与技术/2015届\n - 工作年限：1年\n - 技术博客：http://kyyblabla.github.io/\n - Github: https://github.com/kyyblabla\n - OSChina:http://git.oschina.net/kyyblabla\n - 期望职位：**Java Web工程师**\n - 期望薪资：面议\n - 期望城市：上海\n \n---\n\n# 工作/项目经历\n\n\n## 北京源石云科技有限公司 （2015年6月 ~ 至今）\n\n### 分期消费电商平台（小象优品 ）\n\n分期消费电商App，主打优选商品与分期消费。\n\n技术方案：SpringMVC+MyBatis+MySql+Memcache\n\n主要分工：\n\n- 商品、订单模块的设计与实现，面向APP\n- 商品、订单、用户后台管理模块的设计与实现\n- 独立负责管理后台的前端设计与实现，并协助调试后台管理接口\n\n由于之前习惯使用JAP，对Mybatis纯过程sql语句书写很不适应，但是最终做到了细粒度的查询优化，进一步提高了对sql的掌握程度与优化经验。提出并使用SpringRmi作为各子系统之间远程调用方案（原方案为纯Http调用）, 使远程接口的调用更高效、可靠。本人参考主流电商平台的商品模型，设计出适用于小型电商的SKU管理方案。后台管理使用AngularJS快速推进开发进度，前端严格遵循模块化开发规范提高了系统组件的复用性。\n\n\n### 基于阿里Tanx的DSP广告投放系统（ 源石DSP ）\n\n广告投放平台，对接Tanx（阿里妈妈旗下互联网推广的营销平台），主要投放目标为移动网页、app。 高并发系统，集群环境，日均PV300万。\n\n主要分工：\n\n- 广告展示、点击事件的回调追踪模块，根据规则（千次点击）进行计费\n- 设计与实现后台管理系统前端界面(AngularJS+Bootstrap+RequireJS)，并协助后台系统完成API测试与改进\n- 广告浏览用户地理位置查询接口（基于用户经纬度）\n\n根据产品原型独立实现后台管理系统前端界面，提供广告编辑、预览（模拟移动设备）与投放计划管理。\n使用MongoDB的地理位置Geohash检索，索引全国最小行政单位（村委、街道）数据70万+，数据来源为百度地图api，查询准确率达96%。由于Tanx平台要求单次请求响应时间为160ms，因此系统采用长连接技术，各个模块高度压榨运行效率。\n\n### 信贷员在线拍标工具（ 发单宝）\n\n面向信贷员的信贷信息拍卖平台，提供信贷信息实时在线竞拍。\n\n技术方案：SpringMVC+SpringJPA+MySql+Memcache\n\n- 向APP提供贷款订单、用户信息相关接口\n- 订单、用户相关的后台管理模块设计与实现\n- 后台管理系统前端设计与实现（Angular+BootStrap+RequireJs）\n\n系统的一个难点为订单状态的追踪与埋点触发，本人通过细致的流程分析与产品沟通，确定了订单的各个状态转换与触发事件，做到了状态不遗漏、事件不误触。另外高并发环境下的Spring事务控制也通过此项目得到了很好的掌握。\n\n### 其他项目\n- 合作电商分期消费服务\n- 信贷信息录入助手\n\n \n## 上海直达软件有限公司【实习】（2014年10月 ~ 2015年4月）\n\n### 期货交易通信接口\n\n主要工作：\n\n- 研读交易所开发文档（英文）、学习期货交易相关术语\n- 采用VS2012开发环境，使用C++对交易所提供的C语言接口进行封装，联通内部交易系统\n- 多线程通信程序，使用Boost库提供线程支持\n- 配合SGX进行接口测试，为公司获取交易所认证资格\n\n\n##  中原工学院【在校】（2012年10月~2014年10月）\n\n###  舆情分析-新浪微博采集系统\n\n舆情分析系统的子项目，采集最新微博内容，为核心分析引擎提供数据源。\n\n技术与分工：\n\n- 采用了Spring构建抓取框架,使用HttpClient模拟浏览器请求登陆并抓取微博信息\n- 抓取程序支持动态IP代理更换以及动态账户更换，以防止新浪屏蔽IP及账户\n- 使用Jsoup解析网页中微博信息，存入MySQL数据库，使用Spring JPA构建持久化接口\n- 单台机器微博日均获取量400万\n\n### 基于MQTT的消息服务器\n\n毕业设计题目，可提供嵌入式设备与管理终端之间的通信服务，为智能化工厂项目的子系统，使用MQTT通信协议。\n\n技术与功能：\n\n- 提供平台无关的通信接口，数据格式为JSON，桌面/移动客户端、浏览器（Web Socket）都可接入\n- 采用负载均衡技术、高效处理并发数据，对外提供多对多通信\n- 该项目最终获取校级优秀毕业设计荣誉\n\n\n---\n\n\n# 技能列表\n\n- Web开发：Java\n- Web框架：Spring JPA/Spring MVC/Hibernate/MyBatis\n- Web服务器：Nginx/Tomcat/Jetty\n- 前端框架：Bootstrap/AngularJS/HTML5\n- 前端工具：JQuery/Bower/RequireJs/Gulp/Underscore/LeSS\n- 数据库：MySQL/MongoDB\n- 缓存工具：Memcache/ECache\n- 版本管理、文档和自动化部署工具：Svn/Git/Maven/NPM\n- 单元测试：JUnit/Mocha(JavaScript)\n- 云和开放平台：阿里云/Bae/微信应用后台\n- 其他掌握语言、框架：C/C++/Qt C++/C#\n\n---\n\n# 自我评价\n\n- 重视团队合作，注重开发流程规范，热爱文档\n- 喜欢倒腾各种新奇、有趣的技术\n- 喜欢关注IT行业的最新动态、技术大牛的轶事\n\n---\n\n## 技能关键字\n\n- Java\n- Spring\n- Html\n- Bootstrap\n- AngularJs\n- Mysql\n\n---\n\n# 致谢\n\n感谢您花时间阅读我的简历，期待能有机会和您共事。\n","updated":"2017-03-22T11:29:31.000Z","path":"resume/index.html","comments":1,"_id":"cj0kw032g001llc7y858t3up2","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>手机：15800822331</li>\n<li>Email：kyyblabla@163.com</li>\n<li>QQ/微信：337994130/kyyblabla</li>\n</ul>\n<hr>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>康岩岩/男/1992 </li>\n<li>本科/中原工学院/计算机科学与技术/2015届</li>\n<li>工作年限：1年</li>\n<li>技术博客：<a href=\"http://kyyblabla.github.io/\">http://kyyblabla.github.io/</a></li>\n<li>Github: <a href=\"https://github.com/kyyblabla\" target=\"_blank\" rel=\"external\">https://github.com/kyyblabla</a></li>\n<li>OSChina:<a href=\"http://git.oschina.net/kyyblabla\" target=\"_blank\" rel=\"external\">http://git.oschina.net/kyyblabla</a></li>\n<li>期望职位：<strong>Java Web工程师</strong></li>\n<li>期望薪资：面议</li>\n<li>期望城市：上海</li>\n</ul>\n<hr>\n<h1 id=\"工作-项目经历\"><a href=\"#工作-项目经历\" class=\"headerlink\" title=\"工作/项目经历\"></a>工作/项目经历</h1><h2 id=\"北京源石云科技有限公司-（2015年6月-至今）\"><a href=\"#北京源石云科技有限公司-（2015年6月-至今）\" class=\"headerlink\" title=\"北京源石云科技有限公司 （2015年6月 ~ 至今）\"></a>北京源石云科技有限公司 （2015年6月 ~ 至今）</h2><h3 id=\"分期消费电商平台（小象优品-）\"><a href=\"#分期消费电商平台（小象优品-）\" class=\"headerlink\" title=\"分期消费电商平台（小象优品 ）\"></a>分期消费电商平台（小象优品 ）</h3><p>分期消费电商App，主打优选商品与分期消费。</p>\n<p>技术方案：SpringMVC+MyBatis+MySql+Memcache</p>\n<p>主要分工：</p>\n<ul>\n<li>商品、订单模块的设计与实现，面向APP</li>\n<li>商品、订单、用户后台管理模块的设计与实现</li>\n<li>独立负责管理后台的前端设计与实现，并协助调试后台管理接口</li>\n</ul>\n<p>由于之前习惯使用JAP，对Mybatis纯过程sql语句书写很不适应，但是最终做到了细粒度的查询优化，进一步提高了对sql的掌握程度与优化经验。提出并使用SpringRmi作为各子系统之间远程调用方案（原方案为纯Http调用）, 使远程接口的调用更高效、可靠。本人参考主流电商平台的商品模型，设计出适用于小型电商的SKU管理方案。后台管理使用AngularJS快速推进开发进度，前端严格遵循模块化开发规范提高了系统组件的复用性。</p>\n<h3 id=\"基于阿里Tanx的DSP广告投放系统（-源石DSP-）\"><a href=\"#基于阿里Tanx的DSP广告投放系统（-源石DSP-）\" class=\"headerlink\" title=\"基于阿里Tanx的DSP广告投放系统（ 源石DSP ）\"></a>基于阿里Tanx的DSP广告投放系统（ 源石DSP ）</h3><p>广告投放平台，对接Tanx（阿里妈妈旗下互联网推广的营销平台），主要投放目标为移动网页、app。 高并发系统，集群环境，日均PV300万。</p>\n<p>主要分工：</p>\n<ul>\n<li>广告展示、点击事件的回调追踪模块，根据规则（千次点击）进行计费</li>\n<li>设计与实现后台管理系统前端界面(AngularJS+Bootstrap+RequireJS)，并协助后台系统完成API测试与改进</li>\n<li>广告浏览用户地理位置查询接口（基于用户经纬度）</li>\n</ul>\n<p>根据产品原型独立实现后台管理系统前端界面，提供广告编辑、预览（模拟移动设备）与投放计划管理。<br>使用MongoDB的地理位置Geohash检索，索引全国最小行政单位（村委、街道）数据70万+，数据来源为百度地图api，查询准确率达96%。由于Tanx平台要求单次请求响应时间为160ms，因此系统采用长连接技术，各个模块高度压榨运行效率。</p>\n<h3 id=\"信贷员在线拍标工具（-发单宝）\"><a href=\"#信贷员在线拍标工具（-发单宝）\" class=\"headerlink\" title=\"信贷员在线拍标工具（ 发单宝）\"></a>信贷员在线拍标工具（ 发单宝）</h3><p>面向信贷员的信贷信息拍卖平台，提供信贷信息实时在线竞拍。</p>\n<p>技术方案：SpringMVC+SpringJPA+MySql+Memcache</p>\n<ul>\n<li>向APP提供贷款订单、用户信息相关接口</li>\n<li>订单、用户相关的后台管理模块设计与实现</li>\n<li>后台管理系统前端设计与实现（Angular+BootStrap+RequireJs）</li>\n</ul>\n<p>系统的一个难点为订单状态的追踪与埋点触发，本人通过细致的流程分析与产品沟通，确定了订单的各个状态转换与触发事件，做到了状态不遗漏、事件不误触。另外高并发环境下的Spring事务控制也通过此项目得到了很好的掌握。</p>\n<h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><ul>\n<li>合作电商分期消费服务</li>\n<li>信贷信息录入助手</li>\n</ul>\n<h2 id=\"上海直达软件有限公司【实习】（2014年10月-2015年4月）\"><a href=\"#上海直达软件有限公司【实习】（2014年10月-2015年4月）\" class=\"headerlink\" title=\"上海直达软件有限公司【实习】（2014年10月 ~ 2015年4月）\"></a>上海直达软件有限公司【实习】（2014年10月 ~ 2015年4月）</h2><h3 id=\"期货交易通信接口\"><a href=\"#期货交易通信接口\" class=\"headerlink\" title=\"期货交易通信接口\"></a>期货交易通信接口</h3><p>主要工作：</p>\n<ul>\n<li>研读交易所开发文档（英文）、学习期货交易相关术语</li>\n<li>采用VS2012开发环境，使用C++对交易所提供的C语言接口进行封装，联通内部交易系统</li>\n<li>多线程通信程序，使用Boost库提供线程支持</li>\n<li>配合SGX进行接口测试，为公司获取交易所认证资格</li>\n</ul>\n<h2 id=\"中原工学院【在校】（2012年10月-2014年10月）\"><a href=\"#中原工学院【在校】（2012年10月-2014年10月）\" class=\"headerlink\" title=\"中原工学院【在校】（2012年10月~2014年10月）\"></a>中原工学院【在校】（2012年10月~2014年10月）</h2><h3 id=\"舆情分析-新浪微博采集系统\"><a href=\"#舆情分析-新浪微博采集系统\" class=\"headerlink\" title=\"舆情分析-新浪微博采集系统\"></a>舆情分析-新浪微博采集系统</h3><p>舆情分析系统的子项目，采集最新微博内容，为核心分析引擎提供数据源。</p>\n<p>技术与分工：</p>\n<ul>\n<li>采用了Spring构建抓取框架,使用HttpClient模拟浏览器请求登陆并抓取微博信息</li>\n<li>抓取程序支持动态IP代理更换以及动态账户更换，以防止新浪屏蔽IP及账户</li>\n<li>使用Jsoup解析网页中微博信息，存入MySQL数据库，使用Spring JPA构建持久化接口</li>\n<li>单台机器微博日均获取量400万</li>\n</ul>\n<h3 id=\"基于MQTT的消息服务器\"><a href=\"#基于MQTT的消息服务器\" class=\"headerlink\" title=\"基于MQTT的消息服务器\"></a>基于MQTT的消息服务器</h3><p>毕业设计题目，可提供嵌入式设备与管理终端之间的通信服务，为智能化工厂项目的子系统，使用MQTT通信协议。</p>\n<p>技术与功能：</p>\n<ul>\n<li>提供平台无关的通信接口，数据格式为JSON，桌面/移动客户端、浏览器（Web Socket）都可接入</li>\n<li>采用负载均衡技术、高效处理并发数据，对外提供多对多通信</li>\n<li>该项目最终获取校级优秀毕业设计荣誉</li>\n</ul>\n<hr>\n<h1 id=\"技能列表\"><a href=\"#技能列表\" class=\"headerlink\" title=\"技能列表\"></a>技能列表</h1><ul>\n<li>Web开发：Java</li>\n<li>Web框架：Spring JPA/Spring MVC/Hibernate/MyBatis</li>\n<li>Web服务器：Nginx/Tomcat/Jetty</li>\n<li>前端框架：Bootstrap/AngularJS/HTML5</li>\n<li>前端工具：JQuery/Bower/RequireJs/Gulp/Underscore/LeSS</li>\n<li>数据库：MySQL/MongoDB</li>\n<li>缓存工具：Memcache/ECache</li>\n<li>版本管理、文档和自动化部署工具：Svn/Git/Maven/NPM</li>\n<li>单元测试：JUnit/Mocha(JavaScript)</li>\n<li>云和开放平台：阿里云/Bae/微信应用后台</li>\n<li>其他掌握语言、框架：C/C++/Qt C++/C#</li>\n</ul>\n<hr>\n<h1 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h1><ul>\n<li>重视团队合作，注重开发流程规范，热爱文档</li>\n<li>喜欢倒腾各种新奇、有趣的技术</li>\n<li>喜欢关注IT行业的最新动态、技术大牛的轶事</li>\n</ul>\n<hr>\n<h2 id=\"技能关键字\"><a href=\"#技能关键字\" class=\"headerlink\" title=\"技能关键字\"></a>技能关键字</h2><ul>\n<li>Java</li>\n<li>Spring</li>\n<li>Html</li>\n<li>Bootstrap</li>\n<li>AngularJs</li>\n<li>Mysql</li>\n</ul>\n<hr>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n","excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>手机：15800822331</li>\n<li>Email：kyyblabla@163.com</li>\n<li>QQ/微信：337994130/kyyblabla</li>\n</ul>\n<hr>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>康岩岩/男/1992 </li>\n<li>本科/中原工学院/计算机科学与技术/2015届</li>\n<li>工作年限：1年</li>\n<li>技术博客：<a href=\"http://kyyblabla.github.io/\">http://kyyblabla.github.io/</a></li>\n<li>Github: <a href=\"https://github.com/kyyblabla\">https://github.com/kyyblabla</a></li>\n<li>OSChina:<a href=\"http://git.oschina.net/kyyblabla\">http://git.oschina.net/kyyblabla</a></li>\n<li>期望职位：<strong>Java Web工程师</strong></li>\n<li>期望薪资：面议</li>\n<li>期望城市：上海</li>\n</ul>\n<hr>\n<h1 id=\"工作-项目经历\"><a href=\"#工作-项目经历\" class=\"headerlink\" title=\"工作/项目经历\"></a>工作/项目经历</h1><h2 id=\"北京源石云科技有限公司-（2015年6月-至今）\"><a href=\"#北京源石云科技有限公司-（2015年6月-至今）\" class=\"headerlink\" title=\"北京源石云科技有限公司 （2015年6月 ~ 至今）\"></a>北京源石云科技有限公司 （2015年6月 ~ 至今）</h2><h3 id=\"分期消费电商平台（小象优品-）\"><a href=\"#分期消费电商平台（小象优品-）\" class=\"headerlink\" title=\"分期消费电商平台（小象优品 ）\"></a>分期消费电商平台（小象优品 ）</h3><p>分期消费电商App，主打优选商品与分期消费。</p>\n<p>技术方案：SpringMVC+MyBatis+MySql+Memcache</p>\n<p>主要分工：</p>\n<ul>\n<li>商品、订单模块的设计与实现，面向APP</li>\n<li>商品、订单、用户后台管理模块的设计与实现</li>\n<li>独立负责管理后台的前端设计与实现，并协助调试后台管理接口</li>\n</ul>\n<p>由于之前习惯使用JAP，对Mybatis纯过程sql语句书写很不适应，但是最终做到了细粒度的查询优化，进一步提高了对sql的掌握程度与优化经验。提出并使用SpringRmi作为各子系统之间远程调用方案（原方案为纯Http调用）, 使远程接口的调用更高效、可靠。本人参考主流电商平台的商品模型，设计出适用于小型电商的SKU管理方案。后台管理使用AngularJS快速推进开发进度，前端严格遵循模块化开发规范提高了系统组件的复用性。</p>\n<h3 id=\"基于阿里Tanx的DSP广告投放系统（-源石DSP-）\"><a href=\"#基于阿里Tanx的DSP广告投放系统（-源石DSP-）\" class=\"headerlink\" title=\"基于阿里Tanx的DSP广告投放系统（ 源石DSP ）\"></a>基于阿里Tanx的DSP广告投放系统（ 源石DSP ）</h3><p>广告投放平台，对接Tanx（阿里妈妈旗下互联网推广的营销平台），主要投放目标为移动网页、app。 高并发系统，集群环境，日均PV300万。</p>\n<p>主要分工：</p>\n<ul>\n<li>广告展示、点击事件的回调追踪模块，根据规则（千次点击）进行计费</li>\n<li>设计与实现后台管理系统前端界面(AngularJS+Bootstrap+RequireJS)，并协助后台系统完成API测试与改进</li>\n<li>广告浏览用户地理位置查询接口（基于用户经纬度）</li>\n</ul>\n<p>根据产品原型独立实现后台管理系统前端界面，提供广告编辑、预览（模拟移动设备）与投放计划管理。<br>使用MongoDB的地理位置Geohash检索，索引全国最小行政单位（村委、街道）数据70万+，数据来源为百度地图api，查询准确率达96%。由于Tanx平台要求单次请求响应时间为160ms，因此系统采用长连接技术，各个模块高度压榨运行效率。</p>\n<h3 id=\"信贷员在线拍标工具（-发单宝）\"><a href=\"#信贷员在线拍标工具（-发单宝）\" class=\"headerlink\" title=\"信贷员在线拍标工具（ 发单宝）\"></a>信贷员在线拍标工具（ 发单宝）</h3><p>面向信贷员的信贷信息拍卖平台，提供信贷信息实时在线竞拍。</p>\n<p>技术方案：SpringMVC+SpringJPA+MySql+Memcache</p>\n<ul>\n<li>向APP提供贷款订单、用户信息相关接口</li>\n<li>订单、用户相关的后台管理模块设计与实现</li>\n<li>后台管理系统前端设计与实现（Angular+BootStrap+RequireJs）</li>\n</ul>\n<p>系统的一个难点为订单状态的追踪与埋点触发，本人通过细致的流程分析与产品沟通，确定了订单的各个状态转换与触发事件，做到了状态不遗漏、事件不误触。另外高并发环境下的Spring事务控制也通过此项目得到了很好的掌握。</p>\n<h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><ul>\n<li>合作电商分期消费服务</li>\n<li>信贷信息录入助手</li>\n</ul>\n<h2 id=\"上海直达软件有限公司【实习】（2014年10月-2015年4月）\"><a href=\"#上海直达软件有限公司【实习】（2014年10月-2015年4月）\" class=\"headerlink\" title=\"上海直达软件有限公司【实习】（2014年10月 ~ 2015年4月）\"></a>上海直达软件有限公司【实习】（2014年10月 ~ 2015年4月）</h2><h3 id=\"期货交易通信接口\"><a href=\"#期货交易通信接口\" class=\"headerlink\" title=\"期货交易通信接口\"></a>期货交易通信接口</h3><p>主要工作：</p>\n<ul>\n<li>研读交易所开发文档（英文）、学习期货交易相关术语</li>\n<li>采用VS2012开发环境，使用C++对交易所提供的C语言接口进行封装，联通内部交易系统</li>\n<li>多线程通信程序，使用Boost库提供线程支持</li>\n<li>配合SGX进行接口测试，为公司获取交易所认证资格</li>\n</ul>\n<h2 id=\"中原工学院【在校】（2012年10月-2014年10月）\"><a href=\"#中原工学院【在校】（2012年10月-2014年10月）\" class=\"headerlink\" title=\"中原工学院【在校】（2012年10月~2014年10月）\"></a>中原工学院【在校】（2012年10月~2014年10月）</h2><h3 id=\"舆情分析-新浪微博采集系统\"><a href=\"#舆情分析-新浪微博采集系统\" class=\"headerlink\" title=\"舆情分析-新浪微博采集系统\"></a>舆情分析-新浪微博采集系统</h3><p>舆情分析系统的子项目，采集最新微博内容，为核心分析引擎提供数据源。</p>\n<p>技术与分工：</p>\n<ul>\n<li>采用了Spring构建抓取框架,使用HttpClient模拟浏览器请求登陆并抓取微博信息</li>\n<li>抓取程序支持动态IP代理更换以及动态账户更换，以防止新浪屏蔽IP及账户</li>\n<li>使用Jsoup解析网页中微博信息，存入MySQL数据库，使用Spring JPA构建持久化接口</li>\n<li>单台机器微博日均获取量400万</li>\n</ul>\n<h3 id=\"基于MQTT的消息服务器\"><a href=\"#基于MQTT的消息服务器\" class=\"headerlink\" title=\"基于MQTT的消息服务器\"></a>基于MQTT的消息服务器</h3><p>毕业设计题目，可提供嵌入式设备与管理终端之间的通信服务，为智能化工厂项目的子系统，使用MQTT通信协议。</p>\n<p>技术与功能：</p>\n<ul>\n<li>提供平台无关的通信接口，数据格式为JSON，桌面/移动客户端、浏览器（Web Socket）都可接入</li>\n<li>采用负载均衡技术、高效处理并发数据，对外提供多对多通信</li>\n<li>该项目最终获取校级优秀毕业设计荣誉</li>\n</ul>\n<hr>\n<h1 id=\"技能列表\"><a href=\"#技能列表\" class=\"headerlink\" title=\"技能列表\"></a>技能列表</h1><ul>\n<li>Web开发：Java</li>\n<li>Web框架：Spring JPA/Spring MVC/Hibernate/MyBatis</li>\n<li>Web服务器：Nginx/Tomcat/Jetty</li>\n<li>前端框架：Bootstrap/AngularJS/HTML5</li>\n<li>前端工具：JQuery/Bower/RequireJs/Gulp/Underscore/LeSS</li>\n<li>数据库：MySQL/MongoDB</li>\n<li>缓存工具：Memcache/ECache</li>\n<li>版本管理、文档和自动化部署工具：Svn/Git/Maven/NPM</li>\n<li>单元测试：JUnit/Mocha(JavaScript)</li>\n<li>云和开放平台：阿里云/Bae/微信应用后台</li>\n<li>其他掌握语言、框架：C/C++/Qt C++/C#</li>\n</ul>\n<hr>\n<h1 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h1><ul>\n<li>重视团队合作，注重开发流程规范，热爱文档</li>\n<li>喜欢倒腾各种新奇、有趣的技术</li>\n<li>喜欢关注IT行业的最新动态、技术大牛的轶事</li>\n</ul>\n<hr>\n<h2 id=\"技能关键字\"><a href=\"#技能关键字\" class=\"headerlink\" title=\"技能关键字\"></a>技能关键字</h2><ul>\n<li>Java</li>\n<li>Spring</li>\n<li>Html</li>\n<li>Bootstrap</li>\n<li>AngularJs</li>\n<li>Mysql</li>\n</ul>\n<hr>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n"},{"title":"tags","date":"2016-08-17T06:36:54.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-08-17 14:36:54\nlayout: tags\n---\n","updated":"2017-03-19T12:07:20.000Z","path":"tags/index.html","comments":1,"_id":"cj0kw032j001mlc7yk81qkiz0","content":"","excerpt":"","more":""}],"Post":[{"title":"AngularJs 笔记","_content":" AngularJs 笔记\n \n<!--more-->\n\n### 指令directive\n指令`directive`的作用就是实现标签的语义化，扩展标签的功能与属性\n如下定义了一个标签指令`hahaha`：\n```javascript\napp.directive('hahaha', function() {\n\tvar d = {\n\t\trestrict: \"E\",\n\t\treplace: true, //替换掉原来的标签名称为模板内是我标签名\n\t\ttransclude: true, //保存标签内容s\n\t\t// div ng-transclude 表示用div标签包含原来的内容\n\t\ttemplate: \"<div><p>哈哈</p><div ng-transclude></div></div>\", \n\t};\n\treturn d;\n});\n```\n`template`属性用来输出替换原有标签`hahaha`,html定义为：\n```xml\n<hahaha>\n    <span>文字1</span>\n    <span>文字2</span>\n</hahaha>\n```\n输出后的html内容为：\n```xml\n<div><p>哈哈</p>\n\t<div ng-transclude=\"\">\n    \t<span class=\"ng-scope\">文字1</span>\n    \t<span class=\"ng-scope\">文字2</span>\n\t</div>\n</div>\n```\n\n### 监控视图内容变化\n对于某些动态页面，模型值改变引起视图改变，如本博客在后台编辑过程中，可实时预览内容显示效果。需要在视图渲染完毕后调用highlight方法进行代着色。\n定义指令`onFinishRenderPost`：\n```javascript\napp.directive('onFinishRenderPost', function($timeout) {\n return {\n\trestrict: 'A',\n\tlink: function($scope, $el, $attrs) {\n\t\t$scope.$watch(\n\t\t\tfunction() {\n\t\t\t//el表示当前监控的元素，可监控文本内容变化\n\t\t\t\treturn $el[0].innerText; \n\t\t\t},\n\t\t\tfunction(newValue, oldValue) {\n\t\t\t\tif (newValue !== oldValue) {\n\t\t\t\t\t//数据改变,说明内容加载完毕\n\t\t\t\t\t//这里进行代码高亮操作\n\t\t\t\t\t//highlightCodeUtil.hlight(\"\"); \n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n };\n});\n```\n使用指令：\n```xml\n<div class=\"post-context\" on-finish-render-post ng-bind-html=\"post.context|to_html\">\n</div>\n```\n\n### 模型值输出为html\n通过`ng-bind-html`标签可以将模型内容作为html输出,直接使用`<div ng-bind-html=\"html\">`会报错：\n\n> Error: [$sce:unsafe] Attempting to use an unsafe value in a safe context.\n\n这里需要使用`$sce.trustAsHtml(text)`将模型值进行转化\n可通过定义过滤器避免报错：\n```javascript\napp.filter('to_html', ['$sce',\n\tfunction($sce) {\n\t\treturn function(text) {\n\t\t\treturn $sce.trustAsHtml(text);\n\t\t}\n\t}\n]);\n```\n```xml\n<div ng-bind-html=\"html|to_html\">\n</div>\n```\n也可定义函数：\n```javascript\n$scope.toHtml = function(html) {\n\treturn $sce.trustAsHtml(html);\n}\n```\n```xml\n<div ng-bind-html=\"toHtml(html)\">\n</div>\n```\n\n### iframe路径控制\n使用`ng-src`加载路径，不可直接使用原始路径，需通过`$sce.trustAsResourceUrl`转化原始路径：\n```javascript\n$scope.trustSrc = function(url) {\n    return $sce.trustAsResourceUrl(url);\n}\n```\n在iframe中使用转换函数\n```xml\n<iframe ng-src=\"{{trustSrc(url)}}\" width=\"300\" height=\"200\">\n</iframe>\n```","source":"_posts/AngularJs笔记.md","raw":"---\ntitle: AngularJs 笔记\ntags:\n- directive\n- angularjs\n- javascript\n\ncategories:\n- web前端\n\n---\n AngularJs 笔记\n \n<!--more-->\n\n### 指令directive\n指令`directive`的作用就是实现标签的语义化，扩展标签的功能与属性\n如下定义了一个标签指令`hahaha`：\n```javascript\napp.directive('hahaha', function() {\n\tvar d = {\n\t\trestrict: \"E\",\n\t\treplace: true, //替换掉原来的标签名称为模板内是我标签名\n\t\ttransclude: true, //保存标签内容s\n\t\t// div ng-transclude 表示用div标签包含原来的内容\n\t\ttemplate: \"<div><p>哈哈</p><div ng-transclude></div></div>\", \n\t};\n\treturn d;\n});\n```\n`template`属性用来输出替换原有标签`hahaha`,html定义为：\n```xml\n<hahaha>\n    <span>文字1</span>\n    <span>文字2</span>\n</hahaha>\n```\n输出后的html内容为：\n```xml\n<div><p>哈哈</p>\n\t<div ng-transclude=\"\">\n    \t<span class=\"ng-scope\">文字1</span>\n    \t<span class=\"ng-scope\">文字2</span>\n\t</div>\n</div>\n```\n\n### 监控视图内容变化\n对于某些动态页面，模型值改变引起视图改变，如本博客在后台编辑过程中，可实时预览内容显示效果。需要在视图渲染完毕后调用highlight方法进行代着色。\n定义指令`onFinishRenderPost`：\n```javascript\napp.directive('onFinishRenderPost', function($timeout) {\n return {\n\trestrict: 'A',\n\tlink: function($scope, $el, $attrs) {\n\t\t$scope.$watch(\n\t\t\tfunction() {\n\t\t\t//el表示当前监控的元素，可监控文本内容变化\n\t\t\t\treturn $el[0].innerText; \n\t\t\t},\n\t\t\tfunction(newValue, oldValue) {\n\t\t\t\tif (newValue !== oldValue) {\n\t\t\t\t\t//数据改变,说明内容加载完毕\n\t\t\t\t\t//这里进行代码高亮操作\n\t\t\t\t\t//highlightCodeUtil.hlight(\"\"); \n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n };\n});\n```\n使用指令：\n```xml\n<div class=\"post-context\" on-finish-render-post ng-bind-html=\"post.context|to_html\">\n</div>\n```\n\n### 模型值输出为html\n通过`ng-bind-html`标签可以将模型内容作为html输出,直接使用`<div ng-bind-html=\"html\">`会报错：\n\n> Error: [$sce:unsafe] Attempting to use an unsafe value in a safe context.\n\n这里需要使用`$sce.trustAsHtml(text)`将模型值进行转化\n可通过定义过滤器避免报错：\n```javascript\napp.filter('to_html', ['$sce',\n\tfunction($sce) {\n\t\treturn function(text) {\n\t\t\treturn $sce.trustAsHtml(text);\n\t\t}\n\t}\n]);\n```\n```xml\n<div ng-bind-html=\"html|to_html\">\n</div>\n```\n也可定义函数：\n```javascript\n$scope.toHtml = function(html) {\n\treturn $sce.trustAsHtml(html);\n}\n```\n```xml\n<div ng-bind-html=\"toHtml(html)\">\n</div>\n```\n\n### iframe路径控制\n使用`ng-src`加载路径，不可直接使用原始路径，需通过`$sce.trustAsResourceUrl`转化原始路径：\n```javascript\n$scope.trustSrc = function(url) {\n    return $sce.trustAsResourceUrl(url);\n}\n```\n在iframe中使用转换函数\n```xml\n<iframe ng-src=\"{{trustSrc(url)}}\" width=\"300\" height=\"200\">\n</iframe>\n```","slug":"AngularJs笔记","published":1,"date":"2017-03-19T12:07:20.000Z","updated":"2017-03-19T12:07:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0kw030a0000lc7yo4oxvmsa","content":"<p> AngularJs 笔记</p>\n<a id=\"more\"></a>\n<h3 id=\"指令directive\"><a href=\"#指令directive\" class=\"headerlink\" title=\"指令directive\"></a>指令directive</h3><p>指令<code>directive</code>的作用就是实现标签的语义化，扩展标签的功能与属性<br>如下定义了一个标签指令<code>hahaha</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.directive(<span class=\"string\">'hahaha'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> d = &#123;</div><div class=\"line\">\t\t<span class=\"attr\">restrict</span>: <span class=\"string\">\"E\"</span>,</div><div class=\"line\">\t\t<span class=\"attr\">replace</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//替换掉原来的标签名称为模板内是我标签名</span></div><div class=\"line\">\t\ttransclude: <span class=\"literal\">true</span>, <span class=\"comment\">//保存标签内容s</span></div><div class=\"line\">\t\t<span class=\"comment\">// div ng-transclude 表示用div标签包含原来的内容</span></div><div class=\"line\">\t\ttemplate: <span class=\"string\">\"&lt;div&gt;&lt;p&gt;哈哈&lt;/p&gt;&lt;div ng-transclude&gt;&lt;/div&gt;&lt;/div&gt;\"</span>, </div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"keyword\">return</span> d;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><code>template</code>属性用来输出替换原有标签<code>hahaha</code>,html定义为：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hahaha</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>文字1<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>文字2<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">hahaha</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>输出后的html内容为：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>哈哈<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-transclude</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ng-scope\"</span>&gt;</span>文字1<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ng-scope\"</span>&gt;</span>文字2<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"监控视图内容变化\"><a href=\"#监控视图内容变化\" class=\"headerlink\" title=\"监控视图内容变化\"></a>监控视图内容变化</h3><p>对于某些动态页面，模型值改变引起视图改变，如本博客在后台编辑过程中，可实时预览内容显示效果。需要在视图渲染完毕后调用highlight方法进行代着色。<br>定义指令<code>onFinishRenderPost</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.directive(<span class=\"string\">'onFinishRenderPost'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$timeout</span>) </span>&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t<span class=\"attr\">restrict</span>: <span class=\"string\">'A'</span>,</div><div class=\"line\">\t<span class=\"attr\">link</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $el, $attrs</span>) </span>&#123;</div><div class=\"line\">\t\t$scope.$watch(</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//el表示当前监控的元素，可监控文本内容变化</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> $el[<span class=\"number\">0</span>].innerText; </div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue, oldValue</span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (newValue !== oldValue) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//数据改变,说明内容加载完毕</span></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//这里进行代码高亮操作</span></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//highlightCodeUtil.hlight(\"\"); </span></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t);</div><div class=\"line\">\t&#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>使用指令：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-context\"</span> <span class=\"attr\">on-finish-render-post</span> <span class=\"attr\">ng-bind-html</span>=<span class=\"string\">\"post.context|to_html\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"模型值输出为html\"><a href=\"#模型值输出为html\" class=\"headerlink\" title=\"模型值输出为html\"></a>模型值输出为html</h3><p>通过<code>ng-bind-html</code>标签可以将模型内容作为html输出,直接使用<code>&lt;div ng-bind-html=&quot;html&quot;&gt;</code>会报错：</p>\n<blockquote>\n<p>Error: [$sce:unsafe] Attempting to use an unsafe value in a safe context.</p>\n</blockquote>\n<p>这里需要使用<code>$sce.trustAsHtml(text)</code>将模型值进行转化<br>可通过定义过滤器避免报错：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.filter(<span class=\"string\">'to_html'</span>, [<span class=\"string\">'$sce'</span>,</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$sce</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> $sce.trustAsHtml(text);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">]);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-bind-html</span>=<span class=\"string\">\"html|to_html\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>也可定义函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.toHtml = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> $sce.trustAsHtml(html);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-bind-html</span>=<span class=\"string\">\"toHtml(html)\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"iframe路径控制\"><a href=\"#iframe路径控制\" class=\"headerlink\" title=\"iframe路径控制\"></a>iframe路径控制</h3><p>使用<code>ng-src</code>加载路径，不可直接使用原始路径，需通过<code>$sce.trustAsResourceUrl</code>转化原始路径：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.trustSrc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> $sce.trustAsResourceUrl(url);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在iframe中使用转换函数<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">ng-src</span>=<span class=\"string\">\"&#123;&#123;trustSrc(url)&#125;&#125;\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<p> AngularJs 笔记</p>","more":"<h3 id=\"指令directive\"><a href=\"#指令directive\" class=\"headerlink\" title=\"指令directive\"></a>指令directive</h3><p>指令<code>directive</code>的作用就是实现标签的语义化，扩展标签的功能与属性<br>如下定义了一个标签指令<code>hahaha</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.directive(<span class=\"string\">'hahaha'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> d = &#123;</div><div class=\"line\">\t\t<span class=\"attr\">restrict</span>: <span class=\"string\">\"E\"</span>,</div><div class=\"line\">\t\t<span class=\"attr\">replace</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//替换掉原来的标签名称为模板内是我标签名</span></div><div class=\"line\">\t\ttransclude: <span class=\"literal\">true</span>, <span class=\"comment\">//保存标签内容s</span></div><div class=\"line\">\t\t<span class=\"comment\">// div ng-transclude 表示用div标签包含原来的内容</span></div><div class=\"line\">\t\ttemplate: <span class=\"string\">\"&lt;div&gt;&lt;p&gt;哈哈&lt;/p&gt;&lt;div ng-transclude&gt;&lt;/div&gt;&lt;/div&gt;\"</span>, </div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"keyword\">return</span> d;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><code>template</code>属性用来输出替换原有标签<code>hahaha</code>,html定义为：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hahaha</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>文字1<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>文字2<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">hahaha</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>输出后的html内容为：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>哈哈<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-transclude</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ng-scope\"</span>&gt;</span>文字1<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ng-scope\"</span>&gt;</span>文字2<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"监控视图内容变化\"><a href=\"#监控视图内容变化\" class=\"headerlink\" title=\"监控视图内容变化\"></a>监控视图内容变化</h3><p>对于某些动态页面，模型值改变引起视图改变，如本博客在后台编辑过程中，可实时预览内容显示效果。需要在视图渲染完毕后调用highlight方法进行代着色。<br>定义指令<code>onFinishRenderPost</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.directive(<span class=\"string\">'onFinishRenderPost'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$timeout</span>) </span>&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t<span class=\"attr\">restrict</span>: <span class=\"string\">'A'</span>,</div><div class=\"line\">\t<span class=\"attr\">link</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $el, $attrs</span>) </span>&#123;</div><div class=\"line\">\t\t$scope.$watch(</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//el表示当前监控的元素，可监控文本内容变化</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> $el[<span class=\"number\">0</span>].innerText; </div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue, oldValue</span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (newValue !== oldValue) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//数据改变,说明内容加载完毕</span></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//这里进行代码高亮操作</span></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//highlightCodeUtil.hlight(\"\"); </span></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t);</div><div class=\"line\">\t&#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>使用指令：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-context\"</span> <span class=\"attr\">on-finish-render-post</span> <span class=\"attr\">ng-bind-html</span>=<span class=\"string\">\"post.context|to_html\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"模型值输出为html\"><a href=\"#模型值输出为html\" class=\"headerlink\" title=\"模型值输出为html\"></a>模型值输出为html</h3><p>通过<code>ng-bind-html</code>标签可以将模型内容作为html输出,直接使用<code>&lt;div ng-bind-html=&quot;html&quot;&gt;</code>会报错：</p>\n<blockquote>\n<p>Error: [$sce:unsafe] Attempting to use an unsafe value in a safe context.</p>\n</blockquote>\n<p>这里需要使用<code>$sce.trustAsHtml(text)</code>将模型值进行转化<br>可通过定义过滤器避免报错：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.filter(<span class=\"string\">'to_html'</span>, [<span class=\"string\">'$sce'</span>,</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$sce</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> $sce.trustAsHtml(text);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">]);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-bind-html</span>=<span class=\"string\">\"html|to_html\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>也可定义函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.toHtml = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> $sce.trustAsHtml(html);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-bind-html</span>=<span class=\"string\">\"toHtml(html)\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"iframe路径控制\"><a href=\"#iframe路径控制\" class=\"headerlink\" title=\"iframe路径控制\"></a>iframe路径控制</h3><p>使用<code>ng-src</code>加载路径，不可直接使用原始路径，需通过<code>$sce.trustAsResourceUrl</code>转化原始路径：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.trustSrc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> $sce.trustAsResourceUrl(url);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在iframe中使用转换函数<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">ng-src</span>=<span class=\"string\">\"&#123;&#123;trustSrc(url)&#125;&#125;\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></div></pre></td></tr></table></figure></p>"},{"title":"Hexo构建Github博客","date":"2016-03-04T01:16:54.000Z","_content":"是一款简洁好用的博客工具， 通过Mardown文件生成静态文件构成的站点，可以让开发者发布博客时更关注博客本身。通过简单的配置，Hexo可将静态博客站点部署到Github上。例如本博客就是全部由Hexo生成并部署到Github上的。\n\n<!-- more -->\n## Hexo ##\n[Hexo](http://hexo.io \"heo\")是一款简洁好用的博客工具，通过Mardown文件生成静态文件构成的站点，可以让开发者发布博客时更关注博客本身。通过简单的配置，Hexo可将静态博客站点部署到Github上。例如本博客就是全部由Hexo生成并部署到Github上的。\n\n## Github博客 ##\nGithub提供免费的博客空间，开通博客很简单，就是创建一个名称如下形式的代码仓库：\n用户名.github.io\n如:kyyblabla.github.io。往改仓库下提交静态文件即可作为博客内容。\n\n## Hexo部署到Github ##\n将博客仓库地址配置到Hexo的配置文件_config.yml下：\n\n```xml\ndeploy:\n  type: git\n  repository: git@github.com:kyyblabla/kyyblabla.github.io.git\n  branch: master\n```\n\n添加用来部署到Git的插件：\n```\nnpm install hexo-deployer-git --save\n```\n\n在Github上配置自己的公钥后，通过命令即可部署到github：\n```\nhexo d\n```\n\n\n\n","source":"_posts/Hexo构建Github博客.md","raw":"---\ntitle: Hexo构建Github博客\ndate: 2016-03-04 09:16:54\ntags:\n- hexo\n- nodejs\n- 博客\ncategories: \n- nodejs\n\n---\n是一款简洁好用的博客工具， 通过Mardown文件生成静态文件构成的站点，可以让开发者发布博客时更关注博客本身。通过简单的配置，Hexo可将静态博客站点部署到Github上。例如本博客就是全部由Hexo生成并部署到Github上的。\n\n<!-- more -->\n## Hexo ##\n[Hexo](http://hexo.io \"heo\")是一款简洁好用的博客工具，通过Mardown文件生成静态文件构成的站点，可以让开发者发布博客时更关注博客本身。通过简单的配置，Hexo可将静态博客站点部署到Github上。例如本博客就是全部由Hexo生成并部署到Github上的。\n\n## Github博客 ##\nGithub提供免费的博客空间，开通博客很简单，就是创建一个名称如下形式的代码仓库：\n用户名.github.io\n如:kyyblabla.github.io。往改仓库下提交静态文件即可作为博客内容。\n\n## Hexo部署到Github ##\n将博客仓库地址配置到Hexo的配置文件_config.yml下：\n\n```xml\ndeploy:\n  type: git\n  repository: git@github.com:kyyblabla/kyyblabla.github.io.git\n  branch: master\n```\n\n添加用来部署到Git的插件：\n```\nnpm install hexo-deployer-git --save\n```\n\n在Github上配置自己的公钥后，通过命令即可部署到github：\n```\nhexo d\n```\n\n\n\n","slug":"Hexo构建Github博客","published":1,"updated":"2017-03-19T12:07:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0kw030f0002lc7y54eb1jhy","content":"<p>是一款简洁好用的博客工具， 通过Mardown文件生成静态文件构成的站点，可以让开发者发布博客时更关注博客本身。通过简单的配置，Hexo可将静态博客站点部署到Github上。例如本博客就是全部由Hexo生成并部署到Github上的。</p>\n<a id=\"more\"></a>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p><a href=\"http://hexo.io\" title=\"heo\" target=\"_blank\" rel=\"external\">Hexo</a>是一款简洁好用的博客工具，通过Mardown文件生成静态文件构成的站点，可以让开发者发布博客时更关注博客本身。通过简单的配置，Hexo可将静态博客站点部署到Github上。例如本博客就是全部由Hexo生成并部署到Github上的。</p>\n<h2 id=\"Github博客\"><a href=\"#Github博客\" class=\"headerlink\" title=\"Github博客\"></a>Github博客</h2><p>Github提供免费的博客空间，开通博客很简单，就是创建一个名称如下形式的代码仓库：<br>用户名.github.io<br>如:kyyblabla.github.io。往改仓库下提交静态文件即可作为博客内容。</p>\n<h2 id=\"Hexo部署到Github\"><a href=\"#Hexo部署到Github\" class=\"headerlink\" title=\"Hexo部署到Github\"></a>Hexo部署到Github</h2><p>将博客仓库地址配置到Hexo的配置文件_config.yml下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: git@github.com:kyyblabla/kyyblabla.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>添加用来部署到Git的插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<p>在Github上配置自己的公钥后，通过命令即可部署到github：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>是一款简洁好用的博客工具， 通过Mardown文件生成静态文件构成的站点，可以让开发者发布博客时更关注博客本身。通过简单的配置，Hexo可将静态博客站点部署到Github上。例如本博客就是全部由Hexo生成并部署到Github上的。</p>","more":"<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p><a href=\"http://hexo.io\" title=\"heo\">Hexo</a>是一款简洁好用的博客工具，通过Mardown文件生成静态文件构成的站点，可以让开发者发布博客时更关注博客本身。通过简单的配置，Hexo可将静态博客站点部署到Github上。例如本博客就是全部由Hexo生成并部署到Github上的。</p>\n<h2 id=\"Github博客\"><a href=\"#Github博客\" class=\"headerlink\" title=\"Github博客\"></a>Github博客</h2><p>Github提供免费的博客空间，开通博客很简单，就是创建一个名称如下形式的代码仓库：<br>用户名.github.io<br>如:kyyblabla.github.io。往改仓库下提交静态文件即可作为博客内容。</p>\n<h2 id=\"Hexo部署到Github\"><a href=\"#Hexo部署到Github\" class=\"headerlink\" title=\"Hexo部署到Github\"></a>Hexo部署到Github</h2><p>将博客仓库地址配置到Hexo的配置文件_config.yml下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: git@github.com:kyyblabla/kyyblabla.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>添加用来部署到Git的插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<p>在Github上配置自己的公钥后，通过命令即可部署到github：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d</div></pre></td></tr></table></figure></p>"},{"title":"SpringMVC controller输入、输出处理","date":"2017-03-19T12:58:18.000Z","_content":"\n以RESTful应用为前提，在controller方法中，往往要注入一些固定的对象，如当前用户、权限信息等。而且还要返回固定格式的数据以供前端处理，这里介绍一些常在项目中使用的处理方法。\n\n\n<!-- more -->\n\n\n以RESTful应用为前提，在controller方法中，往往要注入一些固定的对象，如当前用户、权限信息等。而且还要返回固定格式的数据以供前端处理，这里介绍一些常在项目中使用的处理方法。\n\n## 注入自定义参数\n\n如下接口用来获取当前用户的地址信息，可以直接在方法中注入用户对象，然而spring参数Resolver并不能直接解析出SessionUserBean，用户信息可能存储于缓存中，通过token标示获取。\n```\n//SessionUserBean用来存储与表示当前回话用户信息\npublic class SessionUserBean {     \nprivate Integer userId;\n}\n\n@RequestMapping(\"/address\")\npublic void getAddress(SessionUserBean sessionUser){\n//do something\n}\n```\n\n可以通过实现HandlerMethodArgumentResolver来定义自己的处理器：\n```\npublic class SessionUseResolver implements HandlerMethodArgumentResolver {   \n\n@Override    \npublic boolean supportsParameter(MethodParameter methodParameter) {\n//只处理指定的对象       \n return methodParameter.getParameterType().equals(SessionUserBean.class);  \n}\n\n@Override    \npublic Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) throws Exception {        \nHttpServletRequest req = (HttpServletRequest) nativeWebRequest.getNativeRequest();\n//这里通过HttpServletRequest的某些头信息获取用户信息\nSessionUserBean sessionUser = SessionUserUtil.getSessionUser(req);       \nreturn sessionUser;    \n}\n}\n```\n在springboot项目中可通过配置类注册解析器，xml配置方法也是类似方式。\n```\n@Configurationpublic \nclass WebMvcConfig extends WebMvcConfigurerAdapter {      \n@Override    \npublic void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {        \nargumentResolvers.add(new SessionUseResolver());      \n//...\n}\n```\n之后便可以在任何需要注入的controller方法中注入对象了。\n\n## 统一封装返回值\n\n假定api统一的返回数据类型如下：\n```\npublic class ResponseVo {    \nprivate String message;   \nprivate Object data;   //接口处理结果 \nprivate String code = \"200\";  //状态吗，正常时为200，否则为异常码\n}\n```\n我们期望在在controller方法中直接返回业务对象（非ResponseVo对象）或者是不返回任何东西（也代表处理成功），但是最终http请求相应的数据仍未统一的格式，那么可以用@ControllerAdvice来简单的实现我们的需求。\n\n```\n@ControllerAdvice\npublic class ResponseVoAdvice implements ResponseBodyAdvice<Object> {    \n@Autowired   \nprivate HttpServletRequest httpServletRequest;    \n@Autowired    \nprivate Environment environment;    \n@Override    \npublic boolean supports(MethodParameter returnType, Class converterType) {        \n  if (returnType.getMethodAnnotation(RequestMapping.class) != null) {            \n    String typeName = returnType.getGenericParameterType().getTypeName();            \n   //只处理非 ResponseVo 的返回值类型，包括void类型也会被处理\n   if (!StringUtils.equals(typeName, ResponseVo.class.getTypeName())) {                \n      return true;            \n    }        \n  }        \n  return false;    \n}   \n@Override   \npublic Object beforeBodyWrite(Object body, \n  MethodParameter returnType, \n  MediaType selectedContentType, Class<? extends HttpMessageConverter<?>> selectedConverterType, \n  ServerHttpRequest request, \n  ServerHttpResponse response) {        \n  if (body instanceof MappingJacksonValue) {            \n    MappingJacksonValue mv = (MappingJacksonValue) body;            \n    //构建结果对象\n    ResponseVo success = ResponseVo.success(mv.getValue());            \n    if (EnvironmentUtil.isTestEvn(environment)) { \n    //测试环境下加入debug信息      \n        success.set_debug(httpServletRequest.getAttribute(SYSTEM.RESPONSE_DEBUG));            \n    }            \n    return success;        \n    } else {            \n      return body;        \n    }    \n }\n}\n```\n上面的示例中只处理正常情况下的数据封装，当业务出现异常时，会由异常处理器统一处理返回结果。\n\n## 还有更多\n以上就是一些对于controller方法输入、输出处理的小case，事实上有无数种方法可以达到同样的效果，如修改默认的json序列化类。\n总之啦，方法有多种，实用为上。\n\n\n\n\n\n","source":"_posts/SpringMVC-controller输入、输出处理.md","raw":"---\ntitle: SpringMVC controller输入、输出处理\ntag:\n  - java\n  - springMVC\n  - controller\ncategories:\n  - java\ndate: 2017-03-19 20:58:18\n---\n\n以RESTful应用为前提，在controller方法中，往往要注入一些固定的对象，如当前用户、权限信息等。而且还要返回固定格式的数据以供前端处理，这里介绍一些常在项目中使用的处理方法。\n\n\n<!-- more -->\n\n\n以RESTful应用为前提，在controller方法中，往往要注入一些固定的对象，如当前用户、权限信息等。而且还要返回固定格式的数据以供前端处理，这里介绍一些常在项目中使用的处理方法。\n\n## 注入自定义参数\n\n如下接口用来获取当前用户的地址信息，可以直接在方法中注入用户对象，然而spring参数Resolver并不能直接解析出SessionUserBean，用户信息可能存储于缓存中，通过token标示获取。\n```\n//SessionUserBean用来存储与表示当前回话用户信息\npublic class SessionUserBean {     \nprivate Integer userId;\n}\n\n@RequestMapping(\"/address\")\npublic void getAddress(SessionUserBean sessionUser){\n//do something\n}\n```\n\n可以通过实现HandlerMethodArgumentResolver来定义自己的处理器：\n```\npublic class SessionUseResolver implements HandlerMethodArgumentResolver {   \n\n@Override    \npublic boolean supportsParameter(MethodParameter methodParameter) {\n//只处理指定的对象       \n return methodParameter.getParameterType().equals(SessionUserBean.class);  \n}\n\n@Override    \npublic Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) throws Exception {        \nHttpServletRequest req = (HttpServletRequest) nativeWebRequest.getNativeRequest();\n//这里通过HttpServletRequest的某些头信息获取用户信息\nSessionUserBean sessionUser = SessionUserUtil.getSessionUser(req);       \nreturn sessionUser;    \n}\n}\n```\n在springboot项目中可通过配置类注册解析器，xml配置方法也是类似方式。\n```\n@Configurationpublic \nclass WebMvcConfig extends WebMvcConfigurerAdapter {      \n@Override    \npublic void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {        \nargumentResolvers.add(new SessionUseResolver());      \n//...\n}\n```\n之后便可以在任何需要注入的controller方法中注入对象了。\n\n## 统一封装返回值\n\n假定api统一的返回数据类型如下：\n```\npublic class ResponseVo {    \nprivate String message;   \nprivate Object data;   //接口处理结果 \nprivate String code = \"200\";  //状态吗，正常时为200，否则为异常码\n}\n```\n我们期望在在controller方法中直接返回业务对象（非ResponseVo对象）或者是不返回任何东西（也代表处理成功），但是最终http请求相应的数据仍未统一的格式，那么可以用@ControllerAdvice来简单的实现我们的需求。\n\n```\n@ControllerAdvice\npublic class ResponseVoAdvice implements ResponseBodyAdvice<Object> {    \n@Autowired   \nprivate HttpServletRequest httpServletRequest;    \n@Autowired    \nprivate Environment environment;    \n@Override    \npublic boolean supports(MethodParameter returnType, Class converterType) {        \n  if (returnType.getMethodAnnotation(RequestMapping.class) != null) {            \n    String typeName = returnType.getGenericParameterType().getTypeName();            \n   //只处理非 ResponseVo 的返回值类型，包括void类型也会被处理\n   if (!StringUtils.equals(typeName, ResponseVo.class.getTypeName())) {                \n      return true;            \n    }        \n  }        \n  return false;    \n}   \n@Override   \npublic Object beforeBodyWrite(Object body, \n  MethodParameter returnType, \n  MediaType selectedContentType, Class<? extends HttpMessageConverter<?>> selectedConverterType, \n  ServerHttpRequest request, \n  ServerHttpResponse response) {        \n  if (body instanceof MappingJacksonValue) {            \n    MappingJacksonValue mv = (MappingJacksonValue) body;            \n    //构建结果对象\n    ResponseVo success = ResponseVo.success(mv.getValue());            \n    if (EnvironmentUtil.isTestEvn(environment)) { \n    //测试环境下加入debug信息      \n        success.set_debug(httpServletRequest.getAttribute(SYSTEM.RESPONSE_DEBUG));            \n    }            \n    return success;        \n    } else {            \n      return body;        \n    }    \n }\n}\n```\n上面的示例中只处理正常情况下的数据封装，当业务出现异常时，会由异常处理器统一处理返回结果。\n\n## 还有更多\n以上就是一些对于controller方法输入、输出处理的小case，事实上有无数种方法可以达到同样的效果，如修改默认的json序列化类。\n总之啦，方法有多种，实用为上。\n\n\n\n\n\n","slug":"SpringMVC-controller输入、输出处理","published":1,"updated":"2017-03-19T12:59:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0kw030n0006lc7ys0ax85ey","content":"<p>以RESTful应用为前提，在controller方法中，往往要注入一些固定的对象，如当前用户、权限信息等。而且还要返回固定格式的数据以供前端处理，这里介绍一些常在项目中使用的处理方法。</p>\n<a id=\"more\"></a>\n<p>以RESTful应用为前提，在controller方法中，往往要注入一些固定的对象，如当前用户、权限信息等。而且还要返回固定格式的数据以供前端处理，这里介绍一些常在项目中使用的处理方法。</p>\n<h2 id=\"注入自定义参数\"><a href=\"#注入自定义参数\" class=\"headerlink\" title=\"注入自定义参数\"></a>注入自定义参数</h2><p>如下接口用来获取当前用户的地址信息，可以直接在方法中注入用户对象，然而spring参数Resolver并不能直接解析出SessionUserBean，用户信息可能存储于缓存中，通过token标示获取。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//SessionUserBean用来存储与表示当前回话用户信息</div><div class=\"line\">public class SessionUserBean &#123;     </div><div class=\"line\">private Integer userId;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@RequestMapping(&quot;/address&quot;)</div><div class=\"line\">public void getAddress(SessionUserBean sessionUser)&#123;</div><div class=\"line\">//do something</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以通过实现HandlerMethodArgumentResolver来定义自己的处理器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SessionUseResolver implements HandlerMethodArgumentResolver &#123;   </div><div class=\"line\"></div><div class=\"line\">@Override    </div><div class=\"line\">public boolean supportsParameter(MethodParameter methodParameter) &#123;</div><div class=\"line\">//只处理指定的对象       </div><div class=\"line\"> return methodParameter.getParameterType().equals(SessionUserBean.class);  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Override    </div><div class=\"line\">public Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) throws Exception &#123;        </div><div class=\"line\">HttpServletRequest req = (HttpServletRequest) nativeWebRequest.getNativeRequest();</div><div class=\"line\">//这里通过HttpServletRequest的某些头信息获取用户信息</div><div class=\"line\">SessionUserBean sessionUser = SessionUserUtil.getSessionUser(req);       </div><div class=\"line\">return sessionUser;    </div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在springboot项目中可通过配置类注册解析器，xml配置方法也是类似方式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Configurationpublic </div><div class=\"line\">class WebMvcConfig extends WebMvcConfigurerAdapter &#123;      </div><div class=\"line\">@Override    </div><div class=\"line\">public void addArgumentResolvers(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers) &#123;        </div><div class=\"line\">argumentResolvers.add(new SessionUseResolver());      </div><div class=\"line\">//...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>之后便可以在任何需要注入的controller方法中注入对象了。</p>\n<h2 id=\"统一封装返回值\"><a href=\"#统一封装返回值\" class=\"headerlink\" title=\"统一封装返回值\"></a>统一封装返回值</h2><p>假定api统一的返回数据类型如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ResponseVo &#123;    </div><div class=\"line\">private String message;   </div><div class=\"line\">private Object data;   //接口处理结果 </div><div class=\"line\">private String code = &quot;200&quot;;  //状态吗，正常时为200，否则为异常码</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们期望在在controller方法中直接返回业务对象（非ResponseVo对象）或者是不返回任何东西（也代表处理成功），但是最终http请求相应的数据仍未统一的格式，那么可以用@ControllerAdvice来简单的实现我们的需求。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ControllerAdvice</div><div class=\"line\">public class ResponseVoAdvice implements ResponseBodyAdvice&lt;Object&gt; &#123;    </div><div class=\"line\">@Autowired   </div><div class=\"line\">private HttpServletRequest httpServletRequest;    </div><div class=\"line\">@Autowired    </div><div class=\"line\">private Environment environment;    </div><div class=\"line\">@Override    </div><div class=\"line\">public boolean supports(MethodParameter returnType, Class converterType) &#123;        </div><div class=\"line\">  if (returnType.getMethodAnnotation(RequestMapping.class) != null) &#123;            </div><div class=\"line\">    String typeName = returnType.getGenericParameterType().getTypeName();            </div><div class=\"line\">   //只处理非 ResponseVo 的返回值类型，包括void类型也会被处理</div><div class=\"line\">   if (!StringUtils.equals(typeName, ResponseVo.class.getTypeName())) &#123;                </div><div class=\"line\">      return true;            </div><div class=\"line\">    &#125;        </div><div class=\"line\">  &#125;        </div><div class=\"line\">  return false;    </div><div class=\"line\">&#125;   </div><div class=\"line\">@Override   </div><div class=\"line\">public Object beforeBodyWrite(Object body, </div><div class=\"line\">  MethodParameter returnType, </div><div class=\"line\">  MediaType selectedContentType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType, </div><div class=\"line\">  ServerHttpRequest request, </div><div class=\"line\">  ServerHttpResponse response) &#123;        </div><div class=\"line\">  if (body instanceof MappingJacksonValue) &#123;            </div><div class=\"line\">    MappingJacksonValue mv = (MappingJacksonValue) body;            </div><div class=\"line\">    //构建结果对象</div><div class=\"line\">    ResponseVo success = ResponseVo.success(mv.getValue());            </div><div class=\"line\">    if (EnvironmentUtil.isTestEvn(environment)) &#123; </div><div class=\"line\">    //测试环境下加入debug信息      </div><div class=\"line\">        success.set_debug(httpServletRequest.getAttribute(SYSTEM.RESPONSE_DEBUG));            </div><div class=\"line\">    &#125;            </div><div class=\"line\">    return success;        </div><div class=\"line\">    &#125; else &#123;            </div><div class=\"line\">      return body;        </div><div class=\"line\">    &#125;    </div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的示例中只处理正常情况下的数据封装，当业务出现异常时，会由异常处理器统一处理返回结果。</p>\n<h2 id=\"还有更多\"><a href=\"#还有更多\" class=\"headerlink\" title=\"还有更多\"></a>还有更多</h2><p>以上就是一些对于controller方法输入、输出处理的小case，事实上有无数种方法可以达到同样的效果，如修改默认的json序列化类。<br>总之啦，方法有多种，实用为上。</p>\n","excerpt":"<p>以RESTful应用为前提，在controller方法中，往往要注入一些固定的对象，如当前用户、权限信息等。而且还要返回固定格式的数据以供前端处理，这里介绍一些常在项目中使用的处理方法。</p>","more":"<p>以RESTful应用为前提，在controller方法中，往往要注入一些固定的对象，如当前用户、权限信息等。而且还要返回固定格式的数据以供前端处理，这里介绍一些常在项目中使用的处理方法。</p>\n<h2 id=\"注入自定义参数\"><a href=\"#注入自定义参数\" class=\"headerlink\" title=\"注入自定义参数\"></a>注入自定义参数</h2><p>如下接口用来获取当前用户的地址信息，可以直接在方法中注入用户对象，然而spring参数Resolver并不能直接解析出SessionUserBean，用户信息可能存储于缓存中，通过token标示获取。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//SessionUserBean用来存储与表示当前回话用户信息</div><div class=\"line\">public class SessionUserBean &#123;     </div><div class=\"line\">private Integer userId;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@RequestMapping(&quot;/address&quot;)</div><div class=\"line\">public void getAddress(SessionUserBean sessionUser)&#123;</div><div class=\"line\">//do something</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以通过实现HandlerMethodArgumentResolver来定义自己的处理器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SessionUseResolver implements HandlerMethodArgumentResolver &#123;   </div><div class=\"line\"></div><div class=\"line\">@Override    </div><div class=\"line\">public boolean supportsParameter(MethodParameter methodParameter) &#123;</div><div class=\"line\">//只处理指定的对象       </div><div class=\"line\"> return methodParameter.getParameterType().equals(SessionUserBean.class);  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Override    </div><div class=\"line\">public Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) throws Exception &#123;        </div><div class=\"line\">HttpServletRequest req = (HttpServletRequest) nativeWebRequest.getNativeRequest();</div><div class=\"line\">//这里通过HttpServletRequest的某些头信息获取用户信息</div><div class=\"line\">SessionUserBean sessionUser = SessionUserUtil.getSessionUser(req);       </div><div class=\"line\">return sessionUser;    </div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在springboot项目中可通过配置类注册解析器，xml配置方法也是类似方式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Configurationpublic </div><div class=\"line\">class WebMvcConfig extends WebMvcConfigurerAdapter &#123;      </div><div class=\"line\">@Override    </div><div class=\"line\">public void addArgumentResolvers(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers) &#123;        </div><div class=\"line\">argumentResolvers.add(new SessionUseResolver());      </div><div class=\"line\">//...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>之后便可以在任何需要注入的controller方法中注入对象了。</p>\n<h2 id=\"统一封装返回值\"><a href=\"#统一封装返回值\" class=\"headerlink\" title=\"统一封装返回值\"></a>统一封装返回值</h2><p>假定api统一的返回数据类型如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ResponseVo &#123;    </div><div class=\"line\">private String message;   </div><div class=\"line\">private Object data;   //接口处理结果 </div><div class=\"line\">private String code = &quot;200&quot;;  //状态吗，正常时为200，否则为异常码</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们期望在在controller方法中直接返回业务对象（非ResponseVo对象）或者是不返回任何东西（也代表处理成功），但是最终http请求相应的数据仍未统一的格式，那么可以用@ControllerAdvice来简单的实现我们的需求。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ControllerAdvice</div><div class=\"line\">public class ResponseVoAdvice implements ResponseBodyAdvice&lt;Object&gt; &#123;    </div><div class=\"line\">@Autowired   </div><div class=\"line\">private HttpServletRequest httpServletRequest;    </div><div class=\"line\">@Autowired    </div><div class=\"line\">private Environment environment;    </div><div class=\"line\">@Override    </div><div class=\"line\">public boolean supports(MethodParameter returnType, Class converterType) &#123;        </div><div class=\"line\">  if (returnType.getMethodAnnotation(RequestMapping.class) != null) &#123;            </div><div class=\"line\">    String typeName = returnType.getGenericParameterType().getTypeName();            </div><div class=\"line\">   //只处理非 ResponseVo 的返回值类型，包括void类型也会被处理</div><div class=\"line\">   if (!StringUtils.equals(typeName, ResponseVo.class.getTypeName())) &#123;                </div><div class=\"line\">      return true;            </div><div class=\"line\">    &#125;        </div><div class=\"line\">  &#125;        </div><div class=\"line\">  return false;    </div><div class=\"line\">&#125;   </div><div class=\"line\">@Override   </div><div class=\"line\">public Object beforeBodyWrite(Object body, </div><div class=\"line\">  MethodParameter returnType, </div><div class=\"line\">  MediaType selectedContentType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType, </div><div class=\"line\">  ServerHttpRequest request, </div><div class=\"line\">  ServerHttpResponse response) &#123;        </div><div class=\"line\">  if (body instanceof MappingJacksonValue) &#123;            </div><div class=\"line\">    MappingJacksonValue mv = (MappingJacksonValue) body;            </div><div class=\"line\">    //构建结果对象</div><div class=\"line\">    ResponseVo success = ResponseVo.success(mv.getValue());            </div><div class=\"line\">    if (EnvironmentUtil.isTestEvn(environment)) &#123; </div><div class=\"line\">    //测试环境下加入debug信息      </div><div class=\"line\">        success.set_debug(httpServletRequest.getAttribute(SYSTEM.RESPONSE_DEBUG));            </div><div class=\"line\">    &#125;            </div><div class=\"line\">    return success;        </div><div class=\"line\">    &#125; else &#123;            </div><div class=\"line\">      return body;        </div><div class=\"line\">    &#125;    </div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的示例中只处理正常情况下的数据封装，当业务出现异常时，会由异常处理器统一处理返回结果。</p>\n<h2 id=\"还有更多\"><a href=\"#还有更多\" class=\"headerlink\" title=\"还有更多\"></a>还有更多</h2><p>以上就是一些对于controller方法输入、输出处理的小case，事实上有无数种方法可以达到同样的效果，如修改默认的json序列化类。<br>总之啦，方法有多种，实用为上。</p>"},{"title":"maven release 插件使用","date":"2017-03-19T12:57:08.000Z","_content":"\n关于release与snapshot的区别这里不再赘述，maven项目在生产环境部署的时候一定是需要打release包的。\n\n<!-- more -->\n\n\n关于release与snapshot的区别这里不再赘述，maven项目在生产环境部署的时候一定是需要打release包的。\n\n [maven-release-plugin](http://maven.apache.org/maven-release/maven-release-plugin/) 可用于构建release版本项目，实现自动打tag、递增版本号、分发release版本jar包至仓库。\n\npom.xml配置：\n\n``` \n<!--git 远程仓库配置-->\n<scm>\n        <connection>scm:git:http://项目git地址</connection>\n        <url>项目git地址（不加'.git后缀'）</url>\n        <developerConnection>scm:项目git地址</developerConnection>\n </scm>\n\n <!--构建配置-->\n <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-release-plugin</artifactId>\n                <version>2.5.3</version>\n                <configuration>\n                    <tagNameFormat>v@{project.version}</tagNameFormat>\n                    <autoVersionSubmodules>true</autoVersionSubmodules>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n   \n    <!--分发配置-->\n    <distributionManagement>\n        <repository>\n            <id>deploymentRepo</id>\n            <name>releases</name>\n            <url>http://somehost/repository/maven-releases/</url>\n            <uniqueVersion>true</uniqueVersion>\n        </repository>\n        <snapshotRepository>\n            <id>deploymentRepo</id>\n            <name>snapshots</name>\n            <url>http://somehost/repository/maven-snapshots/</url>\n            <uniqueVersion>true</uniqueVersion>\n        </snapshotRepository>\n    </distributionManagement>\n```\n由于会将构建的包分发到仓库，需要在maven的配置文件setting.xml下加入权限配置：\n```\n    <server>\n      <id>your id</id>\n      <username>your username</username>\n      <password>your pass</password>\n    </server>\n```\n\n这里最关键的一点是scm节点配置，无论项目是使用git、svn或是其他版本控制工具，都可以在这里配置，详细的配置可参考[scms-overview](http://maven.apache.org/scm/scms-overview.html)。\n\n下面是一个项目配置示例：\n```\n   <scm>\n        <connection>scm:git:http://git-local.bnz.com/srv/bnz-ep.git</connection>\n        <url>http://git-local.bnz.com/srv/bnz-ep</url>\n        <developerConnection>scm:git:http://git-local.bnz.com/srv/bnz-ep.git</developerConnection>\n    </scm>\n```\n\n如果需要跳过单元测试，可以加入参数 `-Darguments=\"-DskipTests\"`，直接使用`-Dmaven.test.skip=true`是**无效**的。\n\n在执行`mvn release:perform`时默认会生成api文档，如果默写注释不符合规范的话会造成构建失败，可以加参数`-DuseReleaseProfile=false`取消构建api文档，或则需要根据规范书写注释。\n```\nmvn release:prepare\nmvn release:perform\n```\n\n如果在构建过程中出现错误，rollback回滚即可\n```\nmvn release:rollback\n```\n\n\n\n","source":"_posts/maven-release-插件使用.md","raw":"---\ntitle: maven release 插件使用\ntag:\n  - java\n  - maven\ncategories:\n  - java\ndate: 2017-03-19 20:57:08\n---\n\n关于release与snapshot的区别这里不再赘述，maven项目在生产环境部署的时候一定是需要打release包的。\n\n<!-- more -->\n\n\n关于release与snapshot的区别这里不再赘述，maven项目在生产环境部署的时候一定是需要打release包的。\n\n [maven-release-plugin](http://maven.apache.org/maven-release/maven-release-plugin/) 可用于构建release版本项目，实现自动打tag、递增版本号、分发release版本jar包至仓库。\n\npom.xml配置：\n\n``` \n<!--git 远程仓库配置-->\n<scm>\n        <connection>scm:git:http://项目git地址</connection>\n        <url>项目git地址（不加'.git后缀'）</url>\n        <developerConnection>scm:项目git地址</developerConnection>\n </scm>\n\n <!--构建配置-->\n <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-release-plugin</artifactId>\n                <version>2.5.3</version>\n                <configuration>\n                    <tagNameFormat>v@{project.version}</tagNameFormat>\n                    <autoVersionSubmodules>true</autoVersionSubmodules>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n   \n    <!--分发配置-->\n    <distributionManagement>\n        <repository>\n            <id>deploymentRepo</id>\n            <name>releases</name>\n            <url>http://somehost/repository/maven-releases/</url>\n            <uniqueVersion>true</uniqueVersion>\n        </repository>\n        <snapshotRepository>\n            <id>deploymentRepo</id>\n            <name>snapshots</name>\n            <url>http://somehost/repository/maven-snapshots/</url>\n            <uniqueVersion>true</uniqueVersion>\n        </snapshotRepository>\n    </distributionManagement>\n```\n由于会将构建的包分发到仓库，需要在maven的配置文件setting.xml下加入权限配置：\n```\n    <server>\n      <id>your id</id>\n      <username>your username</username>\n      <password>your pass</password>\n    </server>\n```\n\n这里最关键的一点是scm节点配置，无论项目是使用git、svn或是其他版本控制工具，都可以在这里配置，详细的配置可参考[scms-overview](http://maven.apache.org/scm/scms-overview.html)。\n\n下面是一个项目配置示例：\n```\n   <scm>\n        <connection>scm:git:http://git-local.bnz.com/srv/bnz-ep.git</connection>\n        <url>http://git-local.bnz.com/srv/bnz-ep</url>\n        <developerConnection>scm:git:http://git-local.bnz.com/srv/bnz-ep.git</developerConnection>\n    </scm>\n```\n\n如果需要跳过单元测试，可以加入参数 `-Darguments=\"-DskipTests\"`，直接使用`-Dmaven.test.skip=true`是**无效**的。\n\n在执行`mvn release:perform`时默认会生成api文档，如果默写注释不符合规范的话会造成构建失败，可以加参数`-DuseReleaseProfile=false`取消构建api文档，或则需要根据规范书写注释。\n```\nmvn release:prepare\nmvn release:perform\n```\n\n如果在构建过程中出现错误，rollback回滚即可\n```\nmvn release:rollback\n```\n\n\n\n","slug":"maven-release-插件使用","published":1,"updated":"2017-03-19T12:58:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0kw030o0007lc7yvmwls2l7","content":"<p>关于release与snapshot的区别这里不再赘述，maven项目在生产环境部署的时候一定是需要打release包的。</p>\n<a id=\"more\"></a>\n<p>关于release与snapshot的区别这里不再赘述，maven项目在生产环境部署的时候一定是需要打release包的。</p>\n<p> <a href=\"http://maven.apache.org/maven-release/maven-release-plugin/\" target=\"_blank\" rel=\"external\">maven-release-plugin</a> 可用于构建release版本项目，实现自动打tag、递增版本号、分发release版本jar包至仓库。</p>\n<p>pom.xml配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--git 远程仓库配置--&gt;</div><div class=\"line\">&lt;scm&gt;</div><div class=\"line\">        &lt;connection&gt;scm:git:http://项目git地址&lt;/connection&gt;</div><div class=\"line\">        &lt;url&gt;项目git地址（不加&apos;.git后缀&apos;）&lt;/url&gt;</div><div class=\"line\">        &lt;developerConnection&gt;scm:项目git地址&lt;/developerConnection&gt;</div><div class=\"line\"> &lt;/scm&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;!--构建配置--&gt;</div><div class=\"line\"> &lt;build&gt;</div><div class=\"line\">        &lt;plugins&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                    &lt;source&gt;1.8&lt;/source&gt;</div><div class=\"line\">                    &lt;target&gt;1.8&lt;/target&gt;</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;version&gt;2.5.3&lt;/version&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                    &lt;tagNameFormat&gt;v@&#123;project.version&#125;&lt;/tagNameFormat&gt;</div><div class=\"line\">                    &lt;autoVersionSubmodules&gt;true&lt;/autoVersionSubmodules&gt;</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">        &lt;/plugins&gt;</div><div class=\"line\">    &lt;/build&gt;</div><div class=\"line\">   </div><div class=\"line\">    &lt;!--分发配置--&gt;</div><div class=\"line\">    &lt;distributionManagement&gt;</div><div class=\"line\">        &lt;repository&gt;</div><div class=\"line\">            &lt;id&gt;deploymentRepo&lt;/id&gt;</div><div class=\"line\">            &lt;name&gt;releases&lt;/name&gt;</div><div class=\"line\">            &lt;url&gt;http://somehost/repository/maven-releases/&lt;/url&gt;</div><div class=\"line\">            &lt;uniqueVersion&gt;true&lt;/uniqueVersion&gt;</div><div class=\"line\">        &lt;/repository&gt;</div><div class=\"line\">        &lt;snapshotRepository&gt;</div><div class=\"line\">            &lt;id&gt;deploymentRepo&lt;/id&gt;</div><div class=\"line\">            &lt;name&gt;snapshots&lt;/name&gt;</div><div class=\"line\">            &lt;url&gt;http://somehost/repository/maven-snapshots/&lt;/url&gt;</div><div class=\"line\">            &lt;uniqueVersion&gt;true&lt;/uniqueVersion&gt;</div><div class=\"line\">        &lt;/snapshotRepository&gt;</div><div class=\"line\">    &lt;/distributionManagement&gt;</div></pre></td></tr></table></figure>\n<p>由于会将构建的包分发到仓库，需要在maven的配置文件setting.xml下加入权限配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;server&gt;</div><div class=\"line\">  &lt;id&gt;your id&lt;/id&gt;</div><div class=\"line\">  &lt;username&gt;your username&lt;/username&gt;</div><div class=\"line\">  &lt;password&gt;your pass&lt;/password&gt;</div><div class=\"line\">&lt;/server&gt;</div></pre></td></tr></table></figure></p>\n<p>这里最关键的一点是scm节点配置，无论项目是使用git、svn或是其他版本控制工具，都可以在这里配置，详细的配置可参考<a href=\"http://maven.apache.org/scm/scms-overview.html\" target=\"_blank\" rel=\"external\">scms-overview</a>。</p>\n<p>下面是一个项目配置示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;scm&gt;</div><div class=\"line\">     &lt;connection&gt;scm:git:http://git-local.bnz.com/srv/bnz-ep.git&lt;/connection&gt;</div><div class=\"line\">     &lt;url&gt;http://git-local.bnz.com/srv/bnz-ep&lt;/url&gt;</div><div class=\"line\">     &lt;developerConnection&gt;scm:git:http://git-local.bnz.com/srv/bnz-ep.git&lt;/developerConnection&gt;</div><div class=\"line\"> &lt;/scm&gt;</div></pre></td></tr></table></figure></p>\n<p>如果需要跳过单元测试，可以加入参数 <code>-Darguments=&quot;-DskipTests&quot;</code>，直接使用<code>-Dmaven.test.skip=true</code>是<strong>无效</strong>的。</p>\n<p>在执行<code>mvn release:perform</code>时默认会生成api文档，如果默写注释不符合规范的话会造成构建失败，可以加参数<code>-DuseReleaseProfile=false</code>取消构建api文档，或则需要根据规范书写注释。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn release:prepare</div><div class=\"line\">mvn release:perform</div></pre></td></tr></table></figure></p>\n<p>如果在构建过程中出现错误，rollback回滚即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn release:rollback</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>关于release与snapshot的区别这里不再赘述，maven项目在生产环境部署的时候一定是需要打release包的。</p>","more":"<p>关于release与snapshot的区别这里不再赘述，maven项目在生产环境部署的时候一定是需要打release包的。</p>\n<p> <a href=\"http://maven.apache.org/maven-release/maven-release-plugin/\">maven-release-plugin</a> 可用于构建release版本项目，实现自动打tag、递增版本号、分发release版本jar包至仓库。</p>\n<p>pom.xml配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--git 远程仓库配置--&gt;</div><div class=\"line\">&lt;scm&gt;</div><div class=\"line\">        &lt;connection&gt;scm:git:http://项目git地址&lt;/connection&gt;</div><div class=\"line\">        &lt;url&gt;项目git地址（不加&apos;.git后缀&apos;）&lt;/url&gt;</div><div class=\"line\">        &lt;developerConnection&gt;scm:项目git地址&lt;/developerConnection&gt;</div><div class=\"line\"> &lt;/scm&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;!--构建配置--&gt;</div><div class=\"line\"> &lt;build&gt;</div><div class=\"line\">        &lt;plugins&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                    &lt;source&gt;1.8&lt;/source&gt;</div><div class=\"line\">                    &lt;target&gt;1.8&lt;/target&gt;</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;version&gt;2.5.3&lt;/version&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                    &lt;tagNameFormat&gt;v@&#123;project.version&#125;&lt;/tagNameFormat&gt;</div><div class=\"line\">                    &lt;autoVersionSubmodules&gt;true&lt;/autoVersionSubmodules&gt;</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">        &lt;/plugins&gt;</div><div class=\"line\">    &lt;/build&gt;</div><div class=\"line\">   </div><div class=\"line\">    &lt;!--分发配置--&gt;</div><div class=\"line\">    &lt;distributionManagement&gt;</div><div class=\"line\">        &lt;repository&gt;</div><div class=\"line\">            &lt;id&gt;deploymentRepo&lt;/id&gt;</div><div class=\"line\">            &lt;name&gt;releases&lt;/name&gt;</div><div class=\"line\">            &lt;url&gt;http://somehost/repository/maven-releases/&lt;/url&gt;</div><div class=\"line\">            &lt;uniqueVersion&gt;true&lt;/uniqueVersion&gt;</div><div class=\"line\">        &lt;/repository&gt;</div><div class=\"line\">        &lt;snapshotRepository&gt;</div><div class=\"line\">            &lt;id&gt;deploymentRepo&lt;/id&gt;</div><div class=\"line\">            &lt;name&gt;snapshots&lt;/name&gt;</div><div class=\"line\">            &lt;url&gt;http://somehost/repository/maven-snapshots/&lt;/url&gt;</div><div class=\"line\">            &lt;uniqueVersion&gt;true&lt;/uniqueVersion&gt;</div><div class=\"line\">        &lt;/snapshotRepository&gt;</div><div class=\"line\">    &lt;/distributionManagement&gt;</div></pre></td></tr></table></figure>\n<p>由于会将构建的包分发到仓库，需要在maven的配置文件setting.xml下加入权限配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;server&gt;</div><div class=\"line\">  &lt;id&gt;your id&lt;/id&gt;</div><div class=\"line\">  &lt;username&gt;your username&lt;/username&gt;</div><div class=\"line\">  &lt;password&gt;your pass&lt;/password&gt;</div><div class=\"line\">&lt;/server&gt;</div></pre></td></tr></table></figure></p>\n<p>这里最关键的一点是scm节点配置，无论项目是使用git、svn或是其他版本控制工具，都可以在这里配置，详细的配置可参考<a href=\"http://maven.apache.org/scm/scms-overview.html\">scms-overview</a>。</p>\n<p>下面是一个项目配置示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;scm&gt;</div><div class=\"line\">     &lt;connection&gt;scm:git:http://git-local.bnz.com/srv/bnz-ep.git&lt;/connection&gt;</div><div class=\"line\">     &lt;url&gt;http://git-local.bnz.com/srv/bnz-ep&lt;/url&gt;</div><div class=\"line\">     &lt;developerConnection&gt;scm:git:http://git-local.bnz.com/srv/bnz-ep.git&lt;/developerConnection&gt;</div><div class=\"line\"> &lt;/scm&gt;</div></pre></td></tr></table></figure></p>\n<p>如果需要跳过单元测试，可以加入参数 <code>-Darguments=&quot;-DskipTests&quot;</code>，直接使用<code>-Dmaven.test.skip=true</code>是<strong>无效</strong>的。</p>\n<p>在执行<code>mvn release:perform</code>时默认会生成api文档，如果默写注释不符合规范的话会造成构建失败，可以加参数<code>-DuseReleaseProfile=false</code>取消构建api文档，或则需要根据规范书写注释。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn release:prepare</div><div class=\"line\">mvn release:perform</div></pre></td></tr></table></figure></p>\n<p>如果在构建过程中出现错误，rollback回滚即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn release:rollback</div></pre></td></tr></table></figure></p>"},{"title":"mybatis-generator 插件使用","date":"2017-03-19T12:55:46.000Z","_content":"\nmybaits在业务系统中的使用很广泛，mybatis-generator就是一款是实用的插件用来生成model和mapper。\n\n<!-- more -->\n\nmybaits在业务系统中的使用很广泛，mybatis-generator就是一款是实用的插件用来生成model和mapper。\n\n## maven插件配置\npom.xml文件配置：\n```\n<dependencies>\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.4.0</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.3.5</version>\n                <configuration>\n                    <verbose>true</verbose>\n                    <overwrite>true</overwrite>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n```\n\n## mybatis-generator 配置\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<generatorConfiguration>\n    <!-- 配置文件，放在resource目录下即可 -->\n    <properties resource=\"generator.properties\"></properties>\n    <!--数据库驱动lib放在根目录下 -->\n    <classPathEntry location=\"lib/mysql-connector-java-5.1.9.jar\"/>\n    <context id=\"MysqlTables\" targetRuntime=\"MyBatis3\">\n        <property name=\"autoDelimitKeywords\" value=\"true\"/>\n        <!--可以使用``包括字段名，避免字段名与sql保留字冲突报错-->\n        <property name=\"beginningDelimiter\" value=\"`\"/>\n        <property name=\"endingDelimiter\" value=\"`\"/>\n        <commentGenerator>\n            <property name=\"suppressDate\" value=\"true\"/>\n            <property name=\"suppressAllComments\" value=\"true\"/>\n        </commentGenerator>\n        <!--数据库链接地址账号密码-->\n        <jdbcConnection driverClass=\"${jdbc.driverClass}\" connectionURL=\"${jdbc.connectionURL}\" userId=\"${jdbc.userId}\"\n                        password=\"${jdbc.password}\">\n        </jdbcConnection>\n        <javaTypeResolver>\n            <property name=\"forceBigDecimals\" value=\"false\"/>\n        </javaTypeResolver>\n        <!--生成Model类存放位置-->\n        <javaModelGenerator targetPackage=\"com.bangnizhao.bzep.model\" targetProject=\"src/main/java\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n            <property name=\"trimStrings\" value=\"true\"/>\n        </javaModelGenerator>\n        <!--生成映射文件存放位置-->\n        <sqlMapGenerator targetPackage=\"mapping\" targetProject=\"src/main/resources\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </sqlMapGenerator>\n        <!--生成Dao类存放位置-->\n        <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.bangnizhao.bzep.mapper\" targetProject=\"src/main/java\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </javaClientGenerator>\n        <!--生成对应表及类名 -->\n        <table tableName=\"t_user_info\" domainObjectName=\"UserInfo\" enableCountByExample=\"true\"\n               enableUpdateByExample=\"true\" enableDeleteByExample=\"true\" enableSelectByExample=\"true\"\n               selectByExampleQueryId=\"true\">\n           <!--mysql 下可取插入的自增型id-->\n            <generatedKey column=\"id\" sqlStatement=\"SELECT LAST_INSERT_ID()\" identity=\"true\" type=\"post\"/>\n        </table>\n        <table tableName=\"t_user_login_his\" domainObjectName=\"UserLoginHistory\" enableCountByExample=\"true\"\n               enableUpdateByExample=\"true\" enableDeleteByExample=\"true\" enableSelectByExample=\"true\"\n               selectByExampleQueryId=\"true\">\n            <generatedKey column=\"seri_id\" sqlStatement=\"SELECT LAST_INSERT_ID()\" identity=\"true\" type=\"post\"/>\n        </table>\n    </context>\n</generatorConfiguration>\n```\nenableXXXExample 是一个很有用的配置，可以帮助生成基本的增删查（包含统计）改接口，其中查询接口是非常强大的。然而这些查询仅限于单表查询，其实单表查询的情况比例是非常大的，实在需要级联查询、特殊查询的时候可以再单独写sql。\n\n### 条件查询示例\n\n```\n//根据手机号码查询用户\npublic UserInfo getByPhoneNo(String phoneNo) {\n        UserInfoExample userInfoExample = new UserInfoExample();\n        userInfoExample.createCriteria()\n                .andUserPhoneEqualTo(phoneNo);\n        List<UserInfo> userInfos = userInfoMapper.selectByExample(userInfoExample);\n        return SaftyListUtil.getFirst(userInfos);\n    }\n```\n### 条件更新示例\n```\n//更新某个人的所有消息状态\n@Transactional\n    public void updateStatusByUserId(int userId, MessageStatus newStatus, MessageStatus oldStatus) {\n        MessageInfoDetailExample messageInfoDetailExample = new MessageInfoDetailExample();\n        messageInfoDetailExample.createCriteria()\n                .andReceiverUserIdEqualTo(userId)\n                .andStatusEqualTo(oldStatus.getCode());\n        MessageInfoDetail messageInfoDetail = new MessageInfoDetail();\n        messageInfoDetail.setStatus(newStatus.getCode());\n        messageInfoDetailMapper.updateByExampleSelective(messageInfoDetail, messageInfoDetailExample);\n    }\n```\n\n## 运行插件\n\n如果需要覆盖之前生成的类和mapper，需要加入参数`-Dmybatis.generator.overwrite=true`，遗憾的是，1.3.5版本时mapper文件只能追加，不能覆盖。所以在运行之前需要手动删除mapper。做个脚本就可解决，详见附录。\n\n```\nmvn -Dmybatis.generator.overwrite=true mybatis-generator:generate\n```\n\n## 附录\n\nwindow下bat：\n```\nRMDIR src\\main\\resources\\mapping /s/q\nmvn -Dmybatis.generator.overwrite=true mybatis-generator:generate\n```\n\nshell:\n```\nDIR=\"src/main/resource/mapping\" \nif [ -e  \"$DIR\" ]  \nthen\n  rm -rf $DIR\n  echo \"delete mappig dir\"\nelse\n  echo \"no mapping dir\"\nfi\nmvn -Dmybatis.generator.overwrite=true mybatis-generator:generate\n```\n\n","source":"_posts/mybatis-generato插件使用.md","raw":"---\ntitle: mybatis-generator 插件使用\ntag:\n  - java\n  - mybatis-generator\n  - mbg\ncategories:\n  - java\ndate: 2017-03-19 20:55:46\n---\n\nmybaits在业务系统中的使用很广泛，mybatis-generator就是一款是实用的插件用来生成model和mapper。\n\n<!-- more -->\n\nmybaits在业务系统中的使用很广泛，mybatis-generator就是一款是实用的插件用来生成model和mapper。\n\n## maven插件配置\npom.xml文件配置：\n```\n<dependencies>\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.4.0</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.3.5</version>\n                <configuration>\n                    <verbose>true</verbose>\n                    <overwrite>true</overwrite>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n```\n\n## mybatis-generator 配置\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<generatorConfiguration>\n    <!-- 配置文件，放在resource目录下即可 -->\n    <properties resource=\"generator.properties\"></properties>\n    <!--数据库驱动lib放在根目录下 -->\n    <classPathEntry location=\"lib/mysql-connector-java-5.1.9.jar\"/>\n    <context id=\"MysqlTables\" targetRuntime=\"MyBatis3\">\n        <property name=\"autoDelimitKeywords\" value=\"true\"/>\n        <!--可以使用``包括字段名，避免字段名与sql保留字冲突报错-->\n        <property name=\"beginningDelimiter\" value=\"`\"/>\n        <property name=\"endingDelimiter\" value=\"`\"/>\n        <commentGenerator>\n            <property name=\"suppressDate\" value=\"true\"/>\n            <property name=\"suppressAllComments\" value=\"true\"/>\n        </commentGenerator>\n        <!--数据库链接地址账号密码-->\n        <jdbcConnection driverClass=\"${jdbc.driverClass}\" connectionURL=\"${jdbc.connectionURL}\" userId=\"${jdbc.userId}\"\n                        password=\"${jdbc.password}\">\n        </jdbcConnection>\n        <javaTypeResolver>\n            <property name=\"forceBigDecimals\" value=\"false\"/>\n        </javaTypeResolver>\n        <!--生成Model类存放位置-->\n        <javaModelGenerator targetPackage=\"com.bangnizhao.bzep.model\" targetProject=\"src/main/java\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n            <property name=\"trimStrings\" value=\"true\"/>\n        </javaModelGenerator>\n        <!--生成映射文件存放位置-->\n        <sqlMapGenerator targetPackage=\"mapping\" targetProject=\"src/main/resources\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </sqlMapGenerator>\n        <!--生成Dao类存放位置-->\n        <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.bangnizhao.bzep.mapper\" targetProject=\"src/main/java\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </javaClientGenerator>\n        <!--生成对应表及类名 -->\n        <table tableName=\"t_user_info\" domainObjectName=\"UserInfo\" enableCountByExample=\"true\"\n               enableUpdateByExample=\"true\" enableDeleteByExample=\"true\" enableSelectByExample=\"true\"\n               selectByExampleQueryId=\"true\">\n           <!--mysql 下可取插入的自增型id-->\n            <generatedKey column=\"id\" sqlStatement=\"SELECT LAST_INSERT_ID()\" identity=\"true\" type=\"post\"/>\n        </table>\n        <table tableName=\"t_user_login_his\" domainObjectName=\"UserLoginHistory\" enableCountByExample=\"true\"\n               enableUpdateByExample=\"true\" enableDeleteByExample=\"true\" enableSelectByExample=\"true\"\n               selectByExampleQueryId=\"true\">\n            <generatedKey column=\"seri_id\" sqlStatement=\"SELECT LAST_INSERT_ID()\" identity=\"true\" type=\"post\"/>\n        </table>\n    </context>\n</generatorConfiguration>\n```\nenableXXXExample 是一个很有用的配置，可以帮助生成基本的增删查（包含统计）改接口，其中查询接口是非常强大的。然而这些查询仅限于单表查询，其实单表查询的情况比例是非常大的，实在需要级联查询、特殊查询的时候可以再单独写sql。\n\n### 条件查询示例\n\n```\n//根据手机号码查询用户\npublic UserInfo getByPhoneNo(String phoneNo) {\n        UserInfoExample userInfoExample = new UserInfoExample();\n        userInfoExample.createCriteria()\n                .andUserPhoneEqualTo(phoneNo);\n        List<UserInfo> userInfos = userInfoMapper.selectByExample(userInfoExample);\n        return SaftyListUtil.getFirst(userInfos);\n    }\n```\n### 条件更新示例\n```\n//更新某个人的所有消息状态\n@Transactional\n    public void updateStatusByUserId(int userId, MessageStatus newStatus, MessageStatus oldStatus) {\n        MessageInfoDetailExample messageInfoDetailExample = new MessageInfoDetailExample();\n        messageInfoDetailExample.createCriteria()\n                .andReceiverUserIdEqualTo(userId)\n                .andStatusEqualTo(oldStatus.getCode());\n        MessageInfoDetail messageInfoDetail = new MessageInfoDetail();\n        messageInfoDetail.setStatus(newStatus.getCode());\n        messageInfoDetailMapper.updateByExampleSelective(messageInfoDetail, messageInfoDetailExample);\n    }\n```\n\n## 运行插件\n\n如果需要覆盖之前生成的类和mapper，需要加入参数`-Dmybatis.generator.overwrite=true`，遗憾的是，1.3.5版本时mapper文件只能追加，不能覆盖。所以在运行之前需要手动删除mapper。做个脚本就可解决，详见附录。\n\n```\nmvn -Dmybatis.generator.overwrite=true mybatis-generator:generate\n```\n\n## 附录\n\nwindow下bat：\n```\nRMDIR src\\main\\resources\\mapping /s/q\nmvn -Dmybatis.generator.overwrite=true mybatis-generator:generate\n```\n\nshell:\n```\nDIR=\"src/main/resource/mapping\" \nif [ -e  \"$DIR\" ]  \nthen\n  rm -rf $DIR\n  echo \"delete mappig dir\"\nelse\n  echo \"no mapping dir\"\nfi\nmvn -Dmybatis.generator.overwrite=true mybatis-generator:generate\n```\n\n","slug":"mybatis-generato插件使用","published":1,"updated":"2017-03-19T12:56:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0kw030q0008lc7yg2q5eg68","content":"<p>mybaits在业务系统中的使用很广泛，mybatis-generator就是一款是实用的插件用来生成model和mapper。</p>\n<a id=\"more\"></a>\n<p>mybaits在业务系统中的使用很广泛，mybatis-generator就是一款是实用的插件用来生成model和mapper。</p>\n<h2 id=\"maven插件配置\"><a href=\"#maven插件配置\" class=\"headerlink\" title=\"maven插件配置\"></a>maven插件配置</h2><p>pom.xml文件配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependencies&gt;</div><div class=\"line\">        &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;3.4.0&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\">    &lt;/dependencies&gt;</div><div class=\"line\">    &lt;build&gt;</div><div class=\"line\">        &lt;plugins&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;version&gt;1.3.5&lt;/version&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                    &lt;verbose&gt;true&lt;/verbose&gt;</div><div class=\"line\">                    &lt;overwrite&gt;true&lt;/overwrite&gt;</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">        &lt;/plugins&gt;</div><div class=\"line\">    &lt;/build&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"mybatis-generator-配置\"><a href=\"#mybatis-generator-配置\" class=\"headerlink\" title=\"mybatis-generator 配置\"></a>mybatis-generator 配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!DOCTYPE generatorConfiguration</div><div class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</div><div class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</div><div class=\"line\">&lt;generatorConfiguration&gt;</div><div class=\"line\">    &lt;!-- 配置文件，放在resource目录下即可 --&gt;</div><div class=\"line\">    &lt;properties resource=&quot;generator.properties&quot;&gt;&lt;/properties&gt;</div><div class=\"line\">    &lt;!--数据库驱动lib放在根目录下 --&gt;</div><div class=\"line\">    &lt;classPathEntry location=&quot;lib/mysql-connector-java-5.1.9.jar&quot;/&gt;</div><div class=\"line\">    &lt;context id=&quot;MysqlTables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</div><div class=\"line\">        &lt;property name=&quot;autoDelimitKeywords&quot; value=&quot;true&quot;/&gt;</div><div class=\"line\">        &lt;!--可以使用``包括字段名，避免字段名与sql保留字冲突报错--&gt;</div><div class=\"line\">        &lt;property name=&quot;beginningDelimiter&quot; value=&quot;`&quot;/&gt;</div><div class=\"line\">        &lt;property name=&quot;endingDelimiter&quot; value=&quot;`&quot;/&gt;</div><div class=\"line\">        &lt;commentGenerator&gt;</div><div class=\"line\">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;</div><div class=\"line\">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</div><div class=\"line\">        &lt;/commentGenerator&gt;</div><div class=\"line\">        &lt;!--数据库链接地址账号密码--&gt;</div><div class=\"line\">        &lt;jdbcConnection driverClass=&quot;$&#123;jdbc.driverClass&#125;&quot; connectionURL=&quot;$&#123;jdbc.connectionURL&#125;&quot; userId=&quot;$&#123;jdbc.userId&#125;&quot;</div><div class=\"line\">                        password=&quot;$&#123;jdbc.password&#125;&quot;&gt;</div><div class=\"line\">        &lt;/jdbcConnection&gt;</div><div class=\"line\">        &lt;javaTypeResolver&gt;</div><div class=\"line\">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</div><div class=\"line\">        &lt;/javaTypeResolver&gt;</div><div class=\"line\">        &lt;!--生成Model类存放位置--&gt;</div><div class=\"line\">        &lt;javaModelGenerator targetPackage=&quot;com.bangnizhao.bzep.model&quot; targetProject=&quot;src/main/java&quot;&gt;</div><div class=\"line\">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class=\"line\">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</div><div class=\"line\">        &lt;/javaModelGenerator&gt;</div><div class=\"line\">        &lt;!--生成映射文件存放位置--&gt;</div><div class=\"line\">        &lt;sqlMapGenerator targetPackage=&quot;mapping&quot; targetProject=&quot;src/main/resources&quot;&gt;</div><div class=\"line\">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class=\"line\">        &lt;/sqlMapGenerator&gt;</div><div class=\"line\">        &lt;!--生成Dao类存放位置--&gt;</div><div class=\"line\">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.bangnizhao.bzep.mapper&quot; targetProject=&quot;src/main/java&quot;&gt;</div><div class=\"line\">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class=\"line\">        &lt;/javaClientGenerator&gt;</div><div class=\"line\">        &lt;!--生成对应表及类名 --&gt;</div><div class=\"line\">        &lt;table tableName=&quot;t_user_info&quot; domainObjectName=&quot;UserInfo&quot; enableCountByExample=&quot;true&quot;</div><div class=\"line\">               enableUpdateByExample=&quot;true&quot; enableDeleteByExample=&quot;true&quot; enableSelectByExample=&quot;true&quot;</div><div class=\"line\">               selectByExampleQueryId=&quot;true&quot;&gt;</div><div class=\"line\">           &lt;!--mysql 下可取插入的自增型id--&gt;</div><div class=\"line\">            &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;SELECT LAST_INSERT_ID()&quot; identity=&quot;true&quot; type=&quot;post&quot;/&gt;</div><div class=\"line\">        &lt;/table&gt;</div><div class=\"line\">        &lt;table tableName=&quot;t_user_login_his&quot; domainObjectName=&quot;UserLoginHistory&quot; enableCountByExample=&quot;true&quot;</div><div class=\"line\">               enableUpdateByExample=&quot;true&quot; enableDeleteByExample=&quot;true&quot; enableSelectByExample=&quot;true&quot;</div><div class=\"line\">               selectByExampleQueryId=&quot;true&quot;&gt;</div><div class=\"line\">            &lt;generatedKey column=&quot;seri_id&quot; sqlStatement=&quot;SELECT LAST_INSERT_ID()&quot; identity=&quot;true&quot; type=&quot;post&quot;/&gt;</div><div class=\"line\">        &lt;/table&gt;</div><div class=\"line\">    &lt;/context&gt;</div><div class=\"line\">&lt;/generatorConfiguration&gt;</div></pre></td></tr></table></figure>\n<p>enableXXXExample 是一个很有用的配置，可以帮助生成基本的增删查（包含统计）改接口，其中查询接口是非常强大的。然而这些查询仅限于单表查询，其实单表查询的情况比例是非常大的，实在需要级联查询、特殊查询的时候可以再单独写sql。</p>\n<h3 id=\"条件查询示例\"><a href=\"#条件查询示例\" class=\"headerlink\" title=\"条件查询示例\"></a>条件查询示例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//根据手机号码查询用户</div><div class=\"line\">public UserInfo getByPhoneNo(String phoneNo) &#123;</div><div class=\"line\">        UserInfoExample userInfoExample = new UserInfoExample();</div><div class=\"line\">        userInfoExample.createCriteria()</div><div class=\"line\">                .andUserPhoneEqualTo(phoneNo);</div><div class=\"line\">        List&lt;UserInfo&gt; userInfos = userInfoMapper.selectByExample(userInfoExample);</div><div class=\"line\">        return SaftyListUtil.getFirst(userInfos);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"条件更新示例\"><a href=\"#条件更新示例\" class=\"headerlink\" title=\"条件更新示例\"></a>条件更新示例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//更新某个人的所有消息状态</div><div class=\"line\">@Transactional</div><div class=\"line\">    public void updateStatusByUserId(int userId, MessageStatus newStatus, MessageStatus oldStatus) &#123;</div><div class=\"line\">        MessageInfoDetailExample messageInfoDetailExample = new MessageInfoDetailExample();</div><div class=\"line\">        messageInfoDetailExample.createCriteria()</div><div class=\"line\">                .andReceiverUserIdEqualTo(userId)</div><div class=\"line\">                .andStatusEqualTo(oldStatus.getCode());</div><div class=\"line\">        MessageInfoDetail messageInfoDetail = new MessageInfoDetail();</div><div class=\"line\">        messageInfoDetail.setStatus(newStatus.getCode());</div><div class=\"line\">        messageInfoDetailMapper.updateByExampleSelective(messageInfoDetail, messageInfoDetailExample);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"运行插件\"><a href=\"#运行插件\" class=\"headerlink\" title=\"运行插件\"></a>运行插件</h2><p>如果需要覆盖之前生成的类和mapper，需要加入参数<code>-Dmybatis.generator.overwrite=true</code>，遗憾的是，1.3.5版本时mapper文件只能追加，不能覆盖。所以在运行之前需要手动删除mapper。做个脚本就可解决，详见附录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn -Dmybatis.generator.overwrite=true mybatis-generator:generate</div></pre></td></tr></table></figure>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>window下bat：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RMDIR src\\main\\resources\\mapping /s/q</div><div class=\"line\">mvn -Dmybatis.generator.overwrite=true mybatis-generator:generate</div></pre></td></tr></table></figure></p>\n<p>shell:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">DIR=&quot;src/main/resource/mapping&quot; </div><div class=\"line\">if [ -e  &quot;$DIR&quot; ]  </div><div class=\"line\">then</div><div class=\"line\">  rm -rf $DIR</div><div class=\"line\">  echo &quot;delete mappig dir&quot;</div><div class=\"line\">else</div><div class=\"line\">  echo &quot;no mapping dir&quot;</div><div class=\"line\">fi</div><div class=\"line\">mvn -Dmybatis.generator.overwrite=true mybatis-generator:generate</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>mybaits在业务系统中的使用很广泛，mybatis-generator就是一款是实用的插件用来生成model和mapper。</p>","more":"<p>mybaits在业务系统中的使用很广泛，mybatis-generator就是一款是实用的插件用来生成model和mapper。</p>\n<h2 id=\"maven插件配置\"><a href=\"#maven插件配置\" class=\"headerlink\" title=\"maven插件配置\"></a>maven插件配置</h2><p>pom.xml文件配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependencies&gt;</div><div class=\"line\">        &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;3.4.0&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\">    &lt;/dependencies&gt;</div><div class=\"line\">    &lt;build&gt;</div><div class=\"line\">        &lt;plugins&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;version&gt;1.3.5&lt;/version&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                    &lt;verbose&gt;true&lt;/verbose&gt;</div><div class=\"line\">                    &lt;overwrite&gt;true&lt;/overwrite&gt;</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">        &lt;/plugins&gt;</div><div class=\"line\">    &lt;/build&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"mybatis-generator-配置\"><a href=\"#mybatis-generator-配置\" class=\"headerlink\" title=\"mybatis-generator 配置\"></a>mybatis-generator 配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!DOCTYPE generatorConfiguration</div><div class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</div><div class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</div><div class=\"line\">&lt;generatorConfiguration&gt;</div><div class=\"line\">    &lt;!-- 配置文件，放在resource目录下即可 --&gt;</div><div class=\"line\">    &lt;properties resource=&quot;generator.properties&quot;&gt;&lt;/properties&gt;</div><div class=\"line\">    &lt;!--数据库驱动lib放在根目录下 --&gt;</div><div class=\"line\">    &lt;classPathEntry location=&quot;lib/mysql-connector-java-5.1.9.jar&quot;/&gt;</div><div class=\"line\">    &lt;context id=&quot;MysqlTables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</div><div class=\"line\">        &lt;property name=&quot;autoDelimitKeywords&quot; value=&quot;true&quot;/&gt;</div><div class=\"line\">        &lt;!--可以使用``包括字段名，避免字段名与sql保留字冲突报错--&gt;</div><div class=\"line\">        &lt;property name=&quot;beginningDelimiter&quot; value=&quot;`&quot;/&gt;</div><div class=\"line\">        &lt;property name=&quot;endingDelimiter&quot; value=&quot;`&quot;/&gt;</div><div class=\"line\">        &lt;commentGenerator&gt;</div><div class=\"line\">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;</div><div class=\"line\">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</div><div class=\"line\">        &lt;/commentGenerator&gt;</div><div class=\"line\">        &lt;!--数据库链接地址账号密码--&gt;</div><div class=\"line\">        &lt;jdbcConnection driverClass=&quot;$&#123;jdbc.driverClass&#125;&quot; connectionURL=&quot;$&#123;jdbc.connectionURL&#125;&quot; userId=&quot;$&#123;jdbc.userId&#125;&quot;</div><div class=\"line\">                        password=&quot;$&#123;jdbc.password&#125;&quot;&gt;</div><div class=\"line\">        &lt;/jdbcConnection&gt;</div><div class=\"line\">        &lt;javaTypeResolver&gt;</div><div class=\"line\">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</div><div class=\"line\">        &lt;/javaTypeResolver&gt;</div><div class=\"line\">        &lt;!--生成Model类存放位置--&gt;</div><div class=\"line\">        &lt;javaModelGenerator targetPackage=&quot;com.bangnizhao.bzep.model&quot; targetProject=&quot;src/main/java&quot;&gt;</div><div class=\"line\">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class=\"line\">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</div><div class=\"line\">        &lt;/javaModelGenerator&gt;</div><div class=\"line\">        &lt;!--生成映射文件存放位置--&gt;</div><div class=\"line\">        &lt;sqlMapGenerator targetPackage=&quot;mapping&quot; targetProject=&quot;src/main/resources&quot;&gt;</div><div class=\"line\">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class=\"line\">        &lt;/sqlMapGenerator&gt;</div><div class=\"line\">        &lt;!--生成Dao类存放位置--&gt;</div><div class=\"line\">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.bangnizhao.bzep.mapper&quot; targetProject=&quot;src/main/java&quot;&gt;</div><div class=\"line\">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</div><div class=\"line\">        &lt;/javaClientGenerator&gt;</div><div class=\"line\">        &lt;!--生成对应表及类名 --&gt;</div><div class=\"line\">        &lt;table tableName=&quot;t_user_info&quot; domainObjectName=&quot;UserInfo&quot; enableCountByExample=&quot;true&quot;</div><div class=\"line\">               enableUpdateByExample=&quot;true&quot; enableDeleteByExample=&quot;true&quot; enableSelectByExample=&quot;true&quot;</div><div class=\"line\">               selectByExampleQueryId=&quot;true&quot;&gt;</div><div class=\"line\">           &lt;!--mysql 下可取插入的自增型id--&gt;</div><div class=\"line\">            &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;SELECT LAST_INSERT_ID()&quot; identity=&quot;true&quot; type=&quot;post&quot;/&gt;</div><div class=\"line\">        &lt;/table&gt;</div><div class=\"line\">        &lt;table tableName=&quot;t_user_login_his&quot; domainObjectName=&quot;UserLoginHistory&quot; enableCountByExample=&quot;true&quot;</div><div class=\"line\">               enableUpdateByExample=&quot;true&quot; enableDeleteByExample=&quot;true&quot; enableSelectByExample=&quot;true&quot;</div><div class=\"line\">               selectByExampleQueryId=&quot;true&quot;&gt;</div><div class=\"line\">            &lt;generatedKey column=&quot;seri_id&quot; sqlStatement=&quot;SELECT LAST_INSERT_ID()&quot; identity=&quot;true&quot; type=&quot;post&quot;/&gt;</div><div class=\"line\">        &lt;/table&gt;</div><div class=\"line\">    &lt;/context&gt;</div><div class=\"line\">&lt;/generatorConfiguration&gt;</div></pre></td></tr></table></figure>\n<p>enableXXXExample 是一个很有用的配置，可以帮助生成基本的增删查（包含统计）改接口，其中查询接口是非常强大的。然而这些查询仅限于单表查询，其实单表查询的情况比例是非常大的，实在需要级联查询、特殊查询的时候可以再单独写sql。</p>\n<h3 id=\"条件查询示例\"><a href=\"#条件查询示例\" class=\"headerlink\" title=\"条件查询示例\"></a>条件查询示例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//根据手机号码查询用户</div><div class=\"line\">public UserInfo getByPhoneNo(String phoneNo) &#123;</div><div class=\"line\">        UserInfoExample userInfoExample = new UserInfoExample();</div><div class=\"line\">        userInfoExample.createCriteria()</div><div class=\"line\">                .andUserPhoneEqualTo(phoneNo);</div><div class=\"line\">        List&lt;UserInfo&gt; userInfos = userInfoMapper.selectByExample(userInfoExample);</div><div class=\"line\">        return SaftyListUtil.getFirst(userInfos);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"条件更新示例\"><a href=\"#条件更新示例\" class=\"headerlink\" title=\"条件更新示例\"></a>条件更新示例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//更新某个人的所有消息状态</div><div class=\"line\">@Transactional</div><div class=\"line\">    public void updateStatusByUserId(int userId, MessageStatus newStatus, MessageStatus oldStatus) &#123;</div><div class=\"line\">        MessageInfoDetailExample messageInfoDetailExample = new MessageInfoDetailExample();</div><div class=\"line\">        messageInfoDetailExample.createCriteria()</div><div class=\"line\">                .andReceiverUserIdEqualTo(userId)</div><div class=\"line\">                .andStatusEqualTo(oldStatus.getCode());</div><div class=\"line\">        MessageInfoDetail messageInfoDetail = new MessageInfoDetail();</div><div class=\"line\">        messageInfoDetail.setStatus(newStatus.getCode());</div><div class=\"line\">        messageInfoDetailMapper.updateByExampleSelective(messageInfoDetail, messageInfoDetailExample);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"运行插件\"><a href=\"#运行插件\" class=\"headerlink\" title=\"运行插件\"></a>运行插件</h2><p>如果需要覆盖之前生成的类和mapper，需要加入参数<code>-Dmybatis.generator.overwrite=true</code>，遗憾的是，1.3.5版本时mapper文件只能追加，不能覆盖。所以在运行之前需要手动删除mapper。做个脚本就可解决，详见附录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn -Dmybatis.generator.overwrite=true mybatis-generator:generate</div></pre></td></tr></table></figure>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>window下bat：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RMDIR src\\main\\resources\\mapping /s/q</div><div class=\"line\">mvn -Dmybatis.generator.overwrite=true mybatis-generator:generate</div></pre></td></tr></table></figure></p>\n<p>shell:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">DIR=&quot;src/main/resource/mapping&quot; </div><div class=\"line\">if [ -e  &quot;$DIR&quot; ]  </div><div class=\"line\">then</div><div class=\"line\">  rm -rf $DIR</div><div class=\"line\">  echo &quot;delete mappig dir&quot;</div><div class=\"line\">else</div><div class=\"line\">  echo &quot;no mapping dir&quot;</div><div class=\"line\">fi</div><div class=\"line\">mvn -Dmybatis.generator.overwrite=true mybatis-generator:generate</div></pre></td></tr></table></figure></p>"},{"title":"vue学习系列-vue结合Semantic-UI","date":"2017-03-19T12:30:57.000Z","_content":"优秀的前端界面框架，语义化的标签更容易理解与记忆，不过相比于bootstap，组件还是少了一些。但可以在个人项目用来尝尝鲜，因为它足够漂亮和简约。\n\n<!-- more -->\n\n## 新鲜的Semantic-UI\n优秀的前端界面框架，语义化的标签更容易理解与记忆，不过相比于bootstap，组件还是少了一些。但可以在个人项目用来尝尝鲜，因为它足够漂亮和简约。\n\n## 与vue的结合\n###  安装&编译\n安装方法如下：\n```\nnpm install semantic-ui --save\n```\n\n安装过程中会有一些选项提示，按照默认选择回车即可，这里不会将它安装到`node_modules`中，事实有些配置还是需要我们修改的，比如它就默认引用了来至于google的字体样式，这个显然是需要修改的，将修改后的代码打包后才能在项目中引用的。默认情况下，vue项目结构如下:\n\n- build\n- config\n- dist\n- src\n- semantic\n - dist\n - src\n\nSemantic-UI 使用gulp构建，确保本地全局安装过gulp，构建如下：\n```\ncd semantic\ngulp build\n```\n编译好的文件存放在semantic/dist目录下，包括js、css等\n\n### 引用\n\n可以先对semantic目录配置别名:\n```\nresolve: {  \nalias: {    \n'src': path.resolve(__dirname, '../src'),    \n'assets': path.resolve(__dirname, '../src/assets'),    \n'components': path.resolve(__dirname, '../src/components'),    \n'semantic': path.resolve(__dirname, '../semantic')\n }\n},\n```\n在js与css中引用：\n```\n<script>\nimport  'semantic/dist/semantic'\n</script>\n\n<style lang=\"less\">  \n@import \"~semantic/dist/semantic.min.css\"; \n</style>\n<scrip>\n```\n\n### 使用实例\n\nSemantic-UI依赖于jQuery来调动组件。需要在ready函数中进行组件初始化。以下是一个下拉列表的示例。\n\n```\n<template>\n<select id=\"s1\" v-model=\"semeModel\" class=\"ui dropdown\"> \n <option value=\"-1\">defult</option> \n <option value=\"1\">value1</option>\n</select>\n</template>\n<script>\nexport default{\n  data{\n     someModel:1\n  }, \n  ready:function(){\n     $('#s1').dropdown()     \n    //这里 someModel 的值不会渲染到界面中，需要手动设置，这是一个很坑爹的地方，正在寻求解决方案。。。\n    this.$nextTick(function () {  \n         $('#s1').dropdown('set selected', this.someModel) \n    )}\n}\n</script>\n```\n在github上，Semantic-UI的vue组建貌似并不多（angular+bootstrap却是非常非常多），所以很多东西需要在使用过程中手动造车轮，比如轮播图、分页组件。本人自己造的勉强能用，还不敢拿出来献丑，准备磨炼一段在贡献出来。\n\n\n\n","source":"_posts/vue学习系列-vue结合Semantic-UI.md","raw":"---\ntitle: vue学习系列-vue结合Semantic-UI\ndate: 2017-03-19 20:30:57\ntag:\n  - vue\n  - Semantic-UI\ncategories:\n  - 前端\n---\n优秀的前端界面框架，语义化的标签更容易理解与记忆，不过相比于bootstap，组件还是少了一些。但可以在个人项目用来尝尝鲜，因为它足够漂亮和简约。\n\n<!-- more -->\n\n## 新鲜的Semantic-UI\n优秀的前端界面框架，语义化的标签更容易理解与记忆，不过相比于bootstap，组件还是少了一些。但可以在个人项目用来尝尝鲜，因为它足够漂亮和简约。\n\n## 与vue的结合\n###  安装&编译\n安装方法如下：\n```\nnpm install semantic-ui --save\n```\n\n安装过程中会有一些选项提示，按照默认选择回车即可，这里不会将它安装到`node_modules`中，事实有些配置还是需要我们修改的，比如它就默认引用了来至于google的字体样式，这个显然是需要修改的，将修改后的代码打包后才能在项目中引用的。默认情况下，vue项目结构如下:\n\n- build\n- config\n- dist\n- src\n- semantic\n - dist\n - src\n\nSemantic-UI 使用gulp构建，确保本地全局安装过gulp，构建如下：\n```\ncd semantic\ngulp build\n```\n编译好的文件存放在semantic/dist目录下，包括js、css等\n\n### 引用\n\n可以先对semantic目录配置别名:\n```\nresolve: {  \nalias: {    \n'src': path.resolve(__dirname, '../src'),    \n'assets': path.resolve(__dirname, '../src/assets'),    \n'components': path.resolve(__dirname, '../src/components'),    \n'semantic': path.resolve(__dirname, '../semantic')\n }\n},\n```\n在js与css中引用：\n```\n<script>\nimport  'semantic/dist/semantic'\n</script>\n\n<style lang=\"less\">  \n@import \"~semantic/dist/semantic.min.css\"; \n</style>\n<scrip>\n```\n\n### 使用实例\n\nSemantic-UI依赖于jQuery来调动组件。需要在ready函数中进行组件初始化。以下是一个下拉列表的示例。\n\n```\n<template>\n<select id=\"s1\" v-model=\"semeModel\" class=\"ui dropdown\"> \n <option value=\"-1\">defult</option> \n <option value=\"1\">value1</option>\n</select>\n</template>\n<script>\nexport default{\n  data{\n     someModel:1\n  }, \n  ready:function(){\n     $('#s1').dropdown()     \n    //这里 someModel 的值不会渲染到界面中，需要手动设置，这是一个很坑爹的地方，正在寻求解决方案。。。\n    this.$nextTick(function () {  \n         $('#s1').dropdown('set selected', this.someModel) \n    )}\n}\n</script>\n```\n在github上，Semantic-UI的vue组建貌似并不多（angular+bootstrap却是非常非常多），所以很多东西需要在使用过程中手动造车轮，比如轮播图、分页组件。本人自己造的勉强能用，还不敢拿出来献丑，准备磨炼一段在贡献出来。\n\n\n\n","slug":"vue学习系列-vue结合Semantic-UI","published":1,"updated":"2017-03-19T12:32:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0kw030u000blc7yxdrugqwt","content":"<p>优秀的前端界面框架，语义化的标签更容易理解与记忆，不过相比于bootstap，组件还是少了一些。但可以在个人项目用来尝尝鲜，因为它足够漂亮和简约。</p>\n<a id=\"more\"></a>\n<h2 id=\"新鲜的Semantic-UI\"><a href=\"#新鲜的Semantic-UI\" class=\"headerlink\" title=\"新鲜的Semantic-UI\"></a>新鲜的Semantic-UI</h2><p>优秀的前端界面框架，语义化的标签更容易理解与记忆，不过相比于bootstap，组件还是少了一些。但可以在个人项目用来尝尝鲜，因为它足够漂亮和简约。</p>\n<h2 id=\"与vue的结合\"><a href=\"#与vue的结合\" class=\"headerlink\" title=\"与vue的结合\"></a>与vue的结合</h2><h3 id=\"安装-amp-编译\"><a href=\"#安装-amp-编译\" class=\"headerlink\" title=\"安装&amp;编译\"></a>安装&amp;编译</h3><p>安装方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install semantic-ui --save</div></pre></td></tr></table></figure></p>\n<p>安装过程中会有一些选项提示，按照默认选择回车即可，这里不会将它安装到<code>node_modules</code>中，事实有些配置还是需要我们修改的，比如它就默认引用了来至于google的字体样式，这个显然是需要修改的，将修改后的代码打包后才能在项目中引用的。默认情况下，vue项目结构如下:</p>\n<ul>\n<li>build</li>\n<li>config</li>\n<li>dist</li>\n<li>src</li>\n<li>semantic<ul>\n<li>dist</li>\n<li>src</li>\n</ul>\n</li>\n</ul>\n<p>Semantic-UI 使用gulp构建，确保本地全局安装过gulp，构建如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd semantic</div><div class=\"line\">gulp build</div></pre></td></tr></table></figure></p>\n<p>编译好的文件存放在semantic/dist目录下，包括js、css等</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>可以先对semantic目录配置别名:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">resolve: &#123;  </div><div class=\"line\">alias: &#123;    </div><div class=\"line\">&apos;src&apos;: path.resolve(__dirname, &apos;../src&apos;),    </div><div class=\"line\">&apos;assets&apos;: path.resolve(__dirname, &apos;../src/assets&apos;),    </div><div class=\"line\">&apos;components&apos;: path.resolve(__dirname, &apos;../src/components&apos;),    </div><div class=\"line\">&apos;semantic&apos;: path.resolve(__dirname, &apos;../semantic&apos;)</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>在js与css中引用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">import  &apos;semantic/dist/semantic&apos;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style lang=&quot;less&quot;&gt;  </div><div class=\"line\">@import &quot;~semantic/dist/semantic.min.css&quot;; </div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;scrip&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h3><p>Semantic-UI依赖于jQuery来调动组件。需要在ready函数中进行组件初始化。以下是一个下拉列表的示例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">&lt;select id=&quot;s1&quot; v-model=&quot;semeModel&quot; class=&quot;ui dropdown&quot;&gt; </div><div class=\"line\"> &lt;option value=&quot;-1&quot;&gt;defult&lt;/option&gt; </div><div class=\"line\"> &lt;option value=&quot;1&quot;&gt;value1&lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">export default&#123;</div><div class=\"line\">  data&#123;</div><div class=\"line\">     someModel:1</div><div class=\"line\">  &#125;, </div><div class=\"line\">  ready:function()&#123;</div><div class=\"line\">     $(&apos;#s1&apos;).dropdown()     </div><div class=\"line\">    //这里 someModel 的值不会渲染到界面中，需要手动设置，这是一个很坑爹的地方，正在寻求解决方案。。。</div><div class=\"line\">    this.$nextTick(function () &#123;  </div><div class=\"line\">         $(&apos;#s1&apos;).dropdown(&apos;set selected&apos;, this.someModel) </div><div class=\"line\">    )&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>在github上，Semantic-UI的vue组建貌似并不多（angular+bootstrap却是非常非常多），所以很多东西需要在使用过程中手动造车轮，比如轮播图、分页组件。本人自己造的勉强能用，还不敢拿出来献丑，准备磨炼一段在贡献出来。</p>\n","excerpt":"<p>优秀的前端界面框架，语义化的标签更容易理解与记忆，不过相比于bootstap，组件还是少了一些。但可以在个人项目用来尝尝鲜，因为它足够漂亮和简约。</p>","more":"<h2 id=\"新鲜的Semantic-UI\"><a href=\"#新鲜的Semantic-UI\" class=\"headerlink\" title=\"新鲜的Semantic-UI\"></a>新鲜的Semantic-UI</h2><p>优秀的前端界面框架，语义化的标签更容易理解与记忆，不过相比于bootstap，组件还是少了一些。但可以在个人项目用来尝尝鲜，因为它足够漂亮和简约。</p>\n<h2 id=\"与vue的结合\"><a href=\"#与vue的结合\" class=\"headerlink\" title=\"与vue的结合\"></a>与vue的结合</h2><h3 id=\"安装-amp-编译\"><a href=\"#安装-amp-编译\" class=\"headerlink\" title=\"安装&amp;编译\"></a>安装&amp;编译</h3><p>安装方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install semantic-ui --save</div></pre></td></tr></table></figure></p>\n<p>安装过程中会有一些选项提示，按照默认选择回车即可，这里不会将它安装到<code>node_modules</code>中，事实有些配置还是需要我们修改的，比如它就默认引用了来至于google的字体样式，这个显然是需要修改的，将修改后的代码打包后才能在项目中引用的。默认情况下，vue项目结构如下:</p>\n<ul>\n<li>build</li>\n<li>config</li>\n<li>dist</li>\n<li>src</li>\n<li>semantic<ul>\n<li>dist</li>\n<li>src</li>\n</ul>\n</li>\n</ul>\n<p>Semantic-UI 使用gulp构建，确保本地全局安装过gulp，构建如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd semantic</div><div class=\"line\">gulp build</div></pre></td></tr></table></figure></p>\n<p>编译好的文件存放在semantic/dist目录下，包括js、css等</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>可以先对semantic目录配置别名:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">resolve: &#123;  </div><div class=\"line\">alias: &#123;    </div><div class=\"line\">&apos;src&apos;: path.resolve(__dirname, &apos;../src&apos;),    </div><div class=\"line\">&apos;assets&apos;: path.resolve(__dirname, &apos;../src/assets&apos;),    </div><div class=\"line\">&apos;components&apos;: path.resolve(__dirname, &apos;../src/components&apos;),    </div><div class=\"line\">&apos;semantic&apos;: path.resolve(__dirname, &apos;../semantic&apos;)</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>在js与css中引用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">import  &apos;semantic/dist/semantic&apos;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style lang=&quot;less&quot;&gt;  </div><div class=\"line\">@import &quot;~semantic/dist/semantic.min.css&quot;; </div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;scrip&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h3><p>Semantic-UI依赖于jQuery来调动组件。需要在ready函数中进行组件初始化。以下是一个下拉列表的示例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">&lt;select id=&quot;s1&quot; v-model=&quot;semeModel&quot; class=&quot;ui dropdown&quot;&gt; </div><div class=\"line\"> &lt;option value=&quot;-1&quot;&gt;defult&lt;/option&gt; </div><div class=\"line\"> &lt;option value=&quot;1&quot;&gt;value1&lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">export default&#123;</div><div class=\"line\">  data&#123;</div><div class=\"line\">     someModel:1</div><div class=\"line\">  &#125;, </div><div class=\"line\">  ready:function()&#123;</div><div class=\"line\">     $(&apos;#s1&apos;).dropdown()     </div><div class=\"line\">    //这里 someModel 的值不会渲染到界面中，需要手动设置，这是一个很坑爹的地方，正在寻求解决方案。。。</div><div class=\"line\">    this.$nextTick(function () &#123;  </div><div class=\"line\">         $(&apos;#s1&apos;).dropdown(&apos;set selected&apos;, this.someModel) </div><div class=\"line\">    )&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>在github上，Semantic-UI的vue组建貌似并不多（angular+bootstrap却是非常非常多），所以很多东西需要在使用过程中手动造车轮，比如轮播图、分页组件。本人自己造的勉强能用，还不敢拿出来献丑，准备磨炼一段在贡献出来。</p>"},{"title":"vue学习系列-初识vue","date":"2017-03-19T12:32:27.000Z","_content":"\n几个月前还沉浸在AngularJS的强大之中，最近才猛然发现vue已经火热到不行。赶紧学习一下。\n\n<!-- more -->\n\n## 写在前面\n\n几个月前还沉浸在AngularJS的强大之中，最近才猛然发现vue已经火热到不行。赶紧学习一下。\n\n目前版本为2.x，相对于1.x有一定的改变。1.x使用较为广泛一些，能查的资料多一些，还是从1.x开始啃吧。另外值得一说的是，vue-router作为与单页应用息息相关的一个模块，2.x也是相对于1.x有着所谓的“破坏性”升级，即不能向下兼容。当时没注意，还是踩了一个深深的坑，所以在此**建议**无论是vue还是vue-router都从从1.x开始搞起，摸清1.x的套路再往2.x升级也不迟，至少不至于拿着2.x问题去找1.x的答案。\n\n## vue-cli 安装\nvue似乎生来伴随着webpack，官方也提供 `vue-cli`用于构建vue项目骨架， 安装方法如下：\n```shell\nnpm install vue-cli -g\n```\n使用`vue -V`可以查看当前版本：\n```shell\nvue -V\n2.3.1\n```\n可以看到当前版本为2.3.1，则默认构建2.x版本的vue项目骨架。\n\n## 初始化项目骨架\n\n使用一下命令极客初始化：\n\n```\nvue init webpack vue-test\n```\n但是前面说过，默认会构建2.x版本，于是构建1.x版本的命令如下：\n```\nvue init webpack#1.0 vue-test\n```\n之后的项目初始化`README.md`已经写得很清楚了，可以参照步骤去做。\n\n## 一些必要的构建配置\n\n项目根目录下build文件包含项目构建相关的配置与脚本，一般情况下不需要改动太多东西，安装默认配置即可。有一些必要的东西，比如JQuery的全局配置,可以再webpack.base.conf.js的plugins属性下加入：\n```  \nnew webpack.ProvidePlugin({      \n$: 'jquery',\n'jQuery': 'jquery' })  \n}\n```\n如果需要根据不用环境的参数（如测试环境与生产环境的API地址）可以再对环境的webpack config文件的plugins加入：\n\n```\nnew webpack.DefinePlugin({  \n'process.env': config.dev.env,  \nENV: config.dev.env //这里可以配置任何根据环境变化的参数\n}\n)\n```\n\n## 结语\n\n很简单的一个开始，vue虽然学的时间不长，但也是从AngularJS这种重量级项目下转过来的，vue的很多地方都可以`无师自通`，当然遇到的坑也在所难免，会在以后一一道来，另外学习vue的过程中还结合了另外一套ui框架[semantic-ui](http://www.semantic-ui.cn/)，即语义化ui，相较于bootstrap，有一些吸引人的地方当然也是bootstrap用的有点烦了^_^，想尝尝鲜。\n\n","source":"_posts/vue学习系列-初识vue.md","raw":"---\ntitle: vue学习系列-初识vue\ntag:\n  - vue\ncategories:\n  - 前端\ndate: 2017-03-19 20:32:27\n---\n\n几个月前还沉浸在AngularJS的强大之中，最近才猛然发现vue已经火热到不行。赶紧学习一下。\n\n<!-- more -->\n\n## 写在前面\n\n几个月前还沉浸在AngularJS的强大之中，最近才猛然发现vue已经火热到不行。赶紧学习一下。\n\n目前版本为2.x，相对于1.x有一定的改变。1.x使用较为广泛一些，能查的资料多一些，还是从1.x开始啃吧。另外值得一说的是，vue-router作为与单页应用息息相关的一个模块，2.x也是相对于1.x有着所谓的“破坏性”升级，即不能向下兼容。当时没注意，还是踩了一个深深的坑，所以在此**建议**无论是vue还是vue-router都从从1.x开始搞起，摸清1.x的套路再往2.x升级也不迟，至少不至于拿着2.x问题去找1.x的答案。\n\n## vue-cli 安装\nvue似乎生来伴随着webpack，官方也提供 `vue-cli`用于构建vue项目骨架， 安装方法如下：\n```shell\nnpm install vue-cli -g\n```\n使用`vue -V`可以查看当前版本：\n```shell\nvue -V\n2.3.1\n```\n可以看到当前版本为2.3.1，则默认构建2.x版本的vue项目骨架。\n\n## 初始化项目骨架\n\n使用一下命令极客初始化：\n\n```\nvue init webpack vue-test\n```\n但是前面说过，默认会构建2.x版本，于是构建1.x版本的命令如下：\n```\nvue init webpack#1.0 vue-test\n```\n之后的项目初始化`README.md`已经写得很清楚了，可以参照步骤去做。\n\n## 一些必要的构建配置\n\n项目根目录下build文件包含项目构建相关的配置与脚本，一般情况下不需要改动太多东西，安装默认配置即可。有一些必要的东西，比如JQuery的全局配置,可以再webpack.base.conf.js的plugins属性下加入：\n```  \nnew webpack.ProvidePlugin({      \n$: 'jquery',\n'jQuery': 'jquery' })  \n}\n```\n如果需要根据不用环境的参数（如测试环境与生产环境的API地址）可以再对环境的webpack config文件的plugins加入：\n\n```\nnew webpack.DefinePlugin({  \n'process.env': config.dev.env,  \nENV: config.dev.env //这里可以配置任何根据环境变化的参数\n}\n)\n```\n\n## 结语\n\n很简单的一个开始，vue虽然学的时间不长，但也是从AngularJS这种重量级项目下转过来的，vue的很多地方都可以`无师自通`，当然遇到的坑也在所难免，会在以后一一道来，另外学习vue的过程中还结合了另外一套ui框架[semantic-ui](http://www.semantic-ui.cn/)，即语义化ui，相较于bootstrap，有一些吸引人的地方当然也是bootstrap用的有点烦了^_^，想尝尝鲜。\n\n","slug":"vue学习系列-初识vue","published":1,"updated":"2017-03-19T12:54:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0kw030v000dlc7yzk9crjst","content":"<p>几个月前还沉浸在AngularJS的强大之中，最近才猛然发现vue已经火热到不行。赶紧学习一下。</p>\n<a id=\"more\"></a>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>几个月前还沉浸在AngularJS的强大之中，最近才猛然发现vue已经火热到不行。赶紧学习一下。</p>\n<p>目前版本为2.x，相对于1.x有一定的改变。1.x使用较为广泛一些，能查的资料多一些，还是从1.x开始啃吧。另外值得一说的是，vue-router作为与单页应用息息相关的一个模块，2.x也是相对于1.x有着所谓的“破坏性”升级，即不能向下兼容。当时没注意，还是踩了一个深深的坑，所以在此<strong>建议</strong>无论是vue还是vue-router都从从1.x开始搞起，摸清1.x的套路再往2.x升级也不迟，至少不至于拿着2.x问题去找1.x的答案。</p>\n<h2 id=\"vue-cli-安装\"><a href=\"#vue-cli-安装\" class=\"headerlink\" title=\"vue-cli 安装\"></a>vue-cli 安装</h2><p>vue似乎生来伴随着webpack，官方也提供 <code>vue-cli</code>用于构建vue项目骨架， 安装方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install vue-cli -g</div></pre></td></tr></table></figure></p>\n<p>使用<code>vue -V</code>可以查看当前版本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue -V</div><div class=\"line\">2.3.1</div></pre></td></tr></table></figure></p>\n<p>可以看到当前版本为2.3.1，则默认构建2.x版本的vue项目骨架。</p>\n<h2 id=\"初始化项目骨架\"><a href=\"#初始化项目骨架\" class=\"headerlink\" title=\"初始化项目骨架\"></a>初始化项目骨架</h2><p>使用一下命令极客初始化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue init webpack vue-test</div></pre></td></tr></table></figure>\n<p>但是前面说过，默认会构建2.x版本，于是构建1.x版本的命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue init webpack#1.0 vue-test</div></pre></td></tr></table></figure></p>\n<p>之后的项目初始化<code>README.md</code>已经写得很清楚了，可以参照步骤去做。</p>\n<h2 id=\"一些必要的构建配置\"><a href=\"#一些必要的构建配置\" class=\"headerlink\" title=\"一些必要的构建配置\"></a>一些必要的构建配置</h2><p>项目根目录下build文件包含项目构建相关的配置与脚本，一般情况下不需要改动太多东西，安装默认配置即可。有一些必要的东西，比如JQuery的全局配置,可以再webpack.base.conf.js的plugins属性下加入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">new webpack.ProvidePlugin(&#123;      </div><div class=\"line\">$: &apos;jquery&apos;,</div><div class=\"line\">&apos;jQuery&apos;: &apos;jquery&apos; &#125;)  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果需要根据不用环境的参数（如测试环境与生产环境的API地址）可以再对环境的webpack config文件的plugins加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">new webpack.DefinePlugin(&#123;  </div><div class=\"line\">&apos;process.env&apos;: config.dev.env,  </div><div class=\"line\">ENV: config.dev.env //这里可以配置任何根据环境变化的参数</div><div class=\"line\">&#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>很简单的一个开始，vue虽然学的时间不长，但也是从AngularJS这种重量级项目下转过来的，vue的很多地方都可以<code>无师自通</code>，当然遇到的坑也在所难免，会在以后一一道来，另外学习vue的过程中还结合了另外一套ui框架<a href=\"http://www.semantic-ui.cn/\" target=\"_blank\" rel=\"external\">semantic-ui</a>，即语义化ui，相较于bootstrap，有一些吸引人的地方当然也是bootstrap用的有点烦了^_^，想尝尝鲜。</p>\n","excerpt":"<p>几个月前还沉浸在AngularJS的强大之中，最近才猛然发现vue已经火热到不行。赶紧学习一下。</p>","more":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>几个月前还沉浸在AngularJS的强大之中，最近才猛然发现vue已经火热到不行。赶紧学习一下。</p>\n<p>目前版本为2.x，相对于1.x有一定的改变。1.x使用较为广泛一些，能查的资料多一些，还是从1.x开始啃吧。另外值得一说的是，vue-router作为与单页应用息息相关的一个模块，2.x也是相对于1.x有着所谓的“破坏性”升级，即不能向下兼容。当时没注意，还是踩了一个深深的坑，所以在此<strong>建议</strong>无论是vue还是vue-router都从从1.x开始搞起，摸清1.x的套路再往2.x升级也不迟，至少不至于拿着2.x问题去找1.x的答案。</p>\n<h2 id=\"vue-cli-安装\"><a href=\"#vue-cli-安装\" class=\"headerlink\" title=\"vue-cli 安装\"></a>vue-cli 安装</h2><p>vue似乎生来伴随着webpack，官方也提供 <code>vue-cli</code>用于构建vue项目骨架， 安装方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install vue-cli -g</div></pre></td></tr></table></figure></p>\n<p>使用<code>vue -V</code>可以查看当前版本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue -V</div><div class=\"line\">2.3.1</div></pre></td></tr></table></figure></p>\n<p>可以看到当前版本为2.3.1，则默认构建2.x版本的vue项目骨架。</p>\n<h2 id=\"初始化项目骨架\"><a href=\"#初始化项目骨架\" class=\"headerlink\" title=\"初始化项目骨架\"></a>初始化项目骨架</h2><p>使用一下命令极客初始化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue init webpack vue-test</div></pre></td></tr></table></figure>\n<p>但是前面说过，默认会构建2.x版本，于是构建1.x版本的命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue init webpack#1.0 vue-test</div></pre></td></tr></table></figure></p>\n<p>之后的项目初始化<code>README.md</code>已经写得很清楚了，可以参照步骤去做。</p>\n<h2 id=\"一些必要的构建配置\"><a href=\"#一些必要的构建配置\" class=\"headerlink\" title=\"一些必要的构建配置\"></a>一些必要的构建配置</h2><p>项目根目录下build文件包含项目构建相关的配置与脚本，一般情况下不需要改动太多东西，安装默认配置即可。有一些必要的东西，比如JQuery的全局配置,可以再webpack.base.conf.js的plugins属性下加入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">new webpack.ProvidePlugin(&#123;      </div><div class=\"line\">$: &apos;jquery&apos;,</div><div class=\"line\">&apos;jQuery&apos;: &apos;jquery&apos; &#125;)  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果需要根据不用环境的参数（如测试环境与生产环境的API地址）可以再对环境的webpack config文件的plugins加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">new webpack.DefinePlugin(&#123;  </div><div class=\"line\">&apos;process.env&apos;: config.dev.env,  </div><div class=\"line\">ENV: config.dev.env //这里可以配置任何根据环境变化的参数</div><div class=\"line\">&#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>很简单的一个开始，vue虽然学的时间不长，但也是从AngularJS这种重量级项目下转过来的，vue的很多地方都可以<code>无师自通</code>，当然遇到的坑也在所难免，会在以后一一道来，另外学习vue的过程中还结合了另外一套ui框架<a href=\"http://www.semantic-ui.cn/\">semantic-ui</a>，即语义化ui，相较于bootstrap，有一些吸引人的地方当然也是bootstrap用的有点烦了^_^，想尝尝鲜。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0kw030a0000lc7yo4oxvmsa","category_id":"cj0kw030i0004lc7yijjy455q","_id":"cj0kw030v000clc7yizth41hg"},{"post_id":"cj0kw030f0002lc7y54eb1jhy","category_id":"cj0kw030t0009lc7yfo7mm5ue","_id":"cj0kw030x000glc7ywq853df7"},{"post_id":"cj0kw030n0006lc7ys0ax85ey","category_id":"cj0kw030w000elc7yt6pntkkp","_id":"cj0kw030z000klc7yyf98tvix"},{"post_id":"cj0kw030o0007lc7yvmwls2l7","category_id":"cj0kw030w000elc7yt6pntkkp","_id":"cj0kw030z000plc7yv6axx49l"},{"post_id":"cj0kw030q0008lc7yg2q5eg68","category_id":"cj0kw030w000elc7yt6pntkkp","_id":"cj0kw0311000slc7yfbarx74m"},{"post_id":"cj0kw030u000blc7yxdrugqwt","category_id":"cj0kw0310000qlc7y35s96klp","_id":"cj0kw0311000wlc7yw4vs826i"},{"post_id":"cj0kw030v000dlc7yzk9crjst","category_id":"cj0kw0310000qlc7y35s96klp","_id":"cj0kw03120010lc7yjaxhlfh6"}],"PostTag":[{"post_id":"cj0kw030a0000lc7yo4oxvmsa","tag_id":"cj0kw030m0005lc7yn66cvd93","_id":"cj0kw030y000jlc7y0zsc531s"},{"post_id":"cj0kw030a0000lc7yo4oxvmsa","tag_id":"cj0kw030t000alc7yw4g3j9nj","_id":"cj0kw030z000llc7y3o52dv0m"},{"post_id":"cj0kw030a0000lc7yo4oxvmsa","tag_id":"cj0kw030w000flc7yuzioftro","_id":"cj0kw030z000olc7yyonnnmc6"},{"post_id":"cj0kw030f0002lc7y54eb1jhy","tag_id":"cj0kw030x000ilc7yh5lt2sj6","_id":"cj0kw0311000vlc7yue1zcu6o"},{"post_id":"cj0kw030f0002lc7y54eb1jhy","tag_id":"cj0kw030z000nlc7yl9umfh0n","_id":"cj0kw0311000xlc7y5nffpmcd"},{"post_id":"cj0kw030f0002lc7y54eb1jhy","tag_id":"cj0kw0310000rlc7y77gfe88u","_id":"cj0kw0312000zlc7yuhjnmhmk"},{"post_id":"cj0kw030n0006lc7ys0ax85ey","tag_id":"cj0kw0311000ulc7yopv45slm","_id":"cj0kw03130013lc7ypmujplx6"},{"post_id":"cj0kw030n0006lc7ys0ax85ey","tag_id":"cj0kw0312000ylc7yl10o2prn","_id":"cj0kw03130014lc7ytlmhgiex"},{"post_id":"cj0kw030n0006lc7ys0ax85ey","tag_id":"cj0kw03130011lc7y47ib07v8","_id":"cj0kw03140016lc7yokk12d3z"},{"post_id":"cj0kw030o0007lc7yvmwls2l7","tag_id":"cj0kw0311000ulc7yopv45slm","_id":"cj0kw03140018lc7ylfr9dxgq"},{"post_id":"cj0kw030o0007lc7yvmwls2l7","tag_id":"cj0kw03130015lc7yeorzcpl7","_id":"cj0kw03140019lc7yzhc8b3cx"},{"post_id":"cj0kw030q0008lc7yg2q5eg68","tag_id":"cj0kw0311000ulc7yopv45slm","_id":"cj0kw0315001dlc7ybona43at"},{"post_id":"cj0kw030q0008lc7yg2q5eg68","tag_id":"cj0kw0314001alc7y1d0ou9x0","_id":"cj0kw0315001elc7yrp953rz8"},{"post_id":"cj0kw030q0008lc7yg2q5eg68","tag_id":"cj0kw0315001blc7ygdc36axc","_id":"cj0kw0317001glc7yheys7rtp"},{"post_id":"cj0kw030u000blc7yxdrugqwt","tag_id":"cj0kw0315001clc7yxqe8n5ro","_id":"cj0kw0318001ilc7yzvwzioip"},{"post_id":"cj0kw030u000blc7yxdrugqwt","tag_id":"cj0kw0315001flc7yg94wy2ar","_id":"cj0kw0318001jlc7yf09znpoq"},{"post_id":"cj0kw030v000dlc7yzk9crjst","tag_id":"cj0kw0315001clc7yxqe8n5ro","_id":"cj0kw0318001klc7yepy5jbf9"}],"Tag":[{"name":"directive","_id":"cj0kw030m0005lc7yn66cvd93"},{"name":"angularjs","_id":"cj0kw030t000alc7yw4g3j9nj"},{"name":"javascript","_id":"cj0kw030w000flc7yuzioftro"},{"name":"hexo","_id":"cj0kw030x000ilc7yh5lt2sj6"},{"name":"nodejs","_id":"cj0kw030z000nlc7yl9umfh0n"},{"name":"博客","_id":"cj0kw0310000rlc7y77gfe88u"},{"name":"java","_id":"cj0kw0311000ulc7yopv45slm"},{"name":"springMVC","_id":"cj0kw0312000ylc7yl10o2prn"},{"name":"controller","_id":"cj0kw03130011lc7y47ib07v8"},{"name":"maven","_id":"cj0kw03130015lc7yeorzcpl7"},{"name":"mybatis-generator","_id":"cj0kw0314001alc7y1d0ou9x0"},{"name":"mbg","_id":"cj0kw0315001blc7ygdc36axc"},{"name":"vue","_id":"cj0kw0315001clc7yxqe8n5ro"},{"name":"Semantic-UI","_id":"cj0kw0315001flc7yg94wy2ar"}]}}